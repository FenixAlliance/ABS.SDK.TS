/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/Departments": {
    /**
     * Retrieve a list of tenant departments
     * @description Retrieve a list of tenant departments
     */
    get: operations["GetTenantDepartments"];
    /**
     * Create a new tenant department
     * @description Create a new tenant department
     */
    post: operations["CreateTenantDepartment"];
  };
  "/api/v2/Departments/{tenantDepartmentId}": {
    /**
     * Retrieve a single tenant department by its ID
     * @description Retrieve a single tenant department by its ID
     */
    get: operations["GetTenantDepartmentById"];
    /**
     * Update a tenant department
     * @description Update a tenant department
     */
    put: operations["UpdateTenantDepartment"];
    /**
     * Delete a tenant department
     * @description Delete a tenant department
     */
    delete: operations["DeleteTenantDepartment"];
    /**
     * Partially update a tenant department
     * @description Partially update a tenant department
     */
    patch: operations["PatchTenantDepartment"];
  };
  "/api/v2/EmployeeEnrollments": {
    /**
     * Retrieve a list of tenant team employee enrollments
     * @description Retrieve a list of tenant team employee enrollments
     */
    get: operations["GetTenantTeamEmployeeEnrollments"];
    /**
     * Create a new tenant team employee enrollment
     * @description Create a new tenant team employee enrollment
     */
    post: operations["CreateTenantTeamEmployeeEnrollment"];
  };
  "/api/v2/EmployeeEnrollments/{tenantTeamId}": {
    /**
     * Retrieve a single tenant team employee enrollment by its ID
     * @description Retrieve a single tenant team employee enrollment by its ID
     */
    get: operations["GetTenantTeamEmployeeEnrollmentById"];
    /**
     * Update a tenant team employee enrollment
     * @description Update a tenant team employee enrollment
     */
    put: operations["UpdateTenantTeamEmployeeEnrollment"];
    /**
     * Deletes a tenant team employee enrollment
     * @description Deletes a tenant team employee enrollment
     */
    delete: operations["DeleteTenantTeamEmployeeEnrollment"];
    /**
     * Partially update a tenant team employee enrollment
     * @description Partially update a tenant team employee enrollment
     */
    patch: operations["PatchTenantTeamEmployeeEnrollment"];
  };
  "/api/v2/Enrollments": {
    /**
     * Retrieve a list of tenant enrollments
     * @description Retrieve a list of tenant enrollments
     */
    get: operations["GetTenantEnrollments"];
    /**
     * Create a new tenant enrollment
     * @description Create a new tenant enrollment
     */
    post: operations["CreateTenantEnrollment"];
  };
  "/api/v2/Enrollments/{tenantId}": {
    /**
     * Retrieve a single tenant enrollment by its ID
     * @description Retrieve a single tenant enrollment by its ID
     */
    get: operations["GetTenantEnrollmentById"];
  };
  "/api/v2/Enrollments/{tenantEnrollmentId}": {
    /**
     * Update a tenant enrollment
     * @description Update a tenant enrollment
     */
    put: operations["UpdateTenantEnrollment"];
    /**
     * Delete a tenant enrollment
     * @description Delete a tenant enrollment
     */
    delete: operations["DeleteTenantEnrollment"];
    /**
     * Partially update a tenant enrollment
     * @description Partially update a tenant enrollment
     */
    patch: operations["PatchTenantEnrollment"];
  };
  "/api/v2/Industries": {
    /**
     * Retrieve a list of tenant industries
     * @description Retrieve a list of tenant industries
     */
    get: operations["GetTenantIndustries"];
    /**
     * Create a new tenant industry
     * @description Create a new tenant industry
     */
    post: operations["CreateTenantIndustry"];
  };
  "/api/v2/Industries/{tenantIndustryId}": {
    /**
     * Retrieve a single tenant industry by its ID
     * @description Retrieve a single tenant industry by its ID
     */
    get: operations["GetTenantIndustryById"];
    /**
     * Update a tenant industry
     * @description Update a tenant industry
     */
    put: operations["UpdateTenantIndustry"];
    /**
     * Delete a tenant industry
     * @description Delete a tenant industry
     */
    delete: operations["DeleteTenantIndustry"];
    /**
     * Partially update a tenant industry
     * @description Partially update a tenant industry
     */
    patch: operations["PatchTenantIndustry"];
  };
  "/api/v2/TenantService/Invitations/{invitationId}": {
    /**
     * Get an invitation by its ID
     * @description Get an invitation by its ID
     */
    get: operations["GetInvitation"];
    /**
     * Delete an invitation
     * @description Delete an invitation
     */
    delete: operations["DeleteInvitation"];
  };
  "/api/v2/TenantService/Invitations": {
    /**
     * Send an invitation to a user to join a tenant
     * @description Send an invitation to a user to join a tenant
     */
    post: operations["SendInvitation"];
  };
  "/api/v2/TenantService/Invitations/{invitationId}/Decline": {
    /**
     * Decline an invitation to join a tenant
     * @description Decline an invitation to join a tenant
     */
    post: operations["DeclineInvitation"];
  };
  "/api/v2/TenantService/Invitations/{invitationId}/Accept": {
    /**
     * Accept an invitation to join a tenant
     * @description Accept an invitation to join a tenant
     */
    post: operations["AcceptInvitation"];
  };
  "/api/v2/Positions": {
    /**
     * Retrieve a list of tenant positions
     * @description Retrieve a list of tenant positions
     */
    get: operations["GetTenantPositions"];
    /**
     * Create a new tenant position
     * @description Create a new tenant position
     */
    post: operations["CreateTenantPosition"];
  };
  "/api/v2/Positions/{tenantPositionId}": {
    /**
     * Retrieve a single tenant position by its ID
     * @description Retrieve a single tenant position by its ID
     */
    get: operations["GetTenantPositionById"];
    /**
     * Update a tenant position
     * @description Update a tenant position
     */
    put: operations["UpdateTenantPosition"];
    /**
     * Delete a tenant position
     * @description Delete a tenant position
     */
    delete: operations["DeleteTenantPosition"];
    /**
     * Partially update a tenant position
     * @description Partially update a tenant position
     */
    patch: operations["PatchTenantPosition"];
  };
  "/api/v2/Segments": {
    /**
     * Retrieve a list of tenant segments for a specific tenant
     * @description Retrieve a list of tenant segments for a specific tenant
     */
    get: operations["GetTenantSegments"];
    /**
     * Create a new tenant segment
     * @description Create a new tenant segment
     */
    post: operations["CreateTenantSegment"];
  };
  "/api/v2/Segments/{tenantSegmentId}": {
    /**
     * Retrieve a single tenant segment by its ID
     * @description Retrieve a single tenant segment by its ID
     */
    get: operations["GetTenantSegmentById"];
    /**
     * Update a tenant segment
     * @description Update a tenant segment
     */
    put: operations["UpdateTenantSegment"];
    /**
     * Delete a tenant segment
     * @description Delete a tenant segment
     */
    delete: operations["DeleteTenantSegment"];
    /**
     * Partially update a tenant segment
     * @description Partially update a tenant segment
     */
    patch: operations["PatchTenantSegment"];
  };
  "/api/v2/Sizes": {
    /**
     * Retrieves a list of tenant sizes for a specific tenant
     * @description Retrieves a list of tenant sizes for a specific tenant and returns an envelope.
     */
    get: operations["GetTenantSizesAsync"];
    /**
     * Creates a new tenant size
     * @description Creates a new tenant size and returns an empty envelope.
     */
    post: operations["CreateTenantSizeAsync"];
  };
  "/api/v2/Sizes/{tenantSizeId}": {
    /**
     * Retrieves a single tenant size by its ID
     * @description Retrieves a single tenant size by its ID and returns an envelope.
     */
    get: operations["GetTenantSizeByIdAsync"];
    /**
     * Updates a tenant size
     * @description Updates a tenant size and returns an envelope.
     */
    put: operations["UpdateTenantSizeAsync"];
    /**
     * Deletes a tenant size by its ID
     * @description Deletes a tenant size by its ID and returns an envelope.
     */
    delete: operations["DeleteTenantSizeAsync"];
    /**
     * Partially updates a tenant size
     * @description Partially updates a tenant size and returns an empty envelope.
     */
    patch: operations["PatchTenantSizeAsync"];
  };
  "/api/v2/TeamContactEnrollments": {
    /**
     * Retrieve a list of tenant team contact enrollments for a specific tenant
     * @description Retrieve a list of tenant team contact enrollments for a specific tenant
     */
    get: operations["GetTenantTeamContactEnrollmentsAsync"];
    /**
     * Create a new tenant team contact enrollment
     * @description Create a new tenant team contact enrollment
     */
    post: operations["CreateTenantContactEnrollmentAsync"];
  };
  "/api/v2/TeamContactEnrollments/{tenantTeamContactEnrollmentId}": {
    /**
     * Retrieve a single tenant team contact enrollment by its ID
     * @description Retrieve a single tenant team contact enrollment by its ID
     */
    get: operations["GetTenantTeamContactEnrollmentByIdAsync"];
    /**
     * Update a tenant team contact enrollment by its ID
     * @description Update a tenant team contact enrollment by its ID
     */
    put: operations["UpdateTenantTeamContactEnrollmentAsync"];
    /**
     * Delete a tenant team contact enrollment
     * @description Delete a tenant team contact enrollment
     */
    delete: operations["DeleteTenantTeamContactEnrollmentAsync"];
    /**
     * Partially updates a tenant team contact enrollment by its ID
     * @description Partially updates a tenant team contact enrollment by its ID
     */
    patch: operations["PatchTenantTeamContactEnrollmentAsync"];
  };
  "/api/v2/TeamProjectEnrollment": {
    /**
     * Retrieve a list of tenant team project enrollments by tenant ID
     * @description Retrieve a list of tenant team project enrollments by tenant ID
     */
    get: operations["GetTenantTeamProjectEnrollmentsAsync"];
    /**
     * Create a new tenant team project enrollment
     * @description Create a new tenant team project enrollment
     */
    post: operations["CreateTenantTeamProjectEnrollmentAsync"];
  };
  "/api/v2/TeamProjectEnrollment/{tenantTeamId}": {
    /**
     * Retrieve a single tenant team project enrollment by its ID
     * @description Retrieve a single tenant team project enrollment by its ID
     */
    get: operations["GetTenantTeamProjectEnrollmentByIdAsync"];
    /**
     * Update a tenant team project enrollment
     * @description Update a tenant team project enrollment
     */
    put: operations["UpdateTenantTeamProjectEnrollmentAsync"];
    /**
     * Delete a tenant team project enrollment
     * @description Delete a tenant team project enrollment
     */
    delete: operations["DeleteTenantTeamProjectEnrollmentAsync"];
    /**
     * Partially updates a tenant team project enrollment
     * @description Partially updates a tenant team project enrollment
     */
    patch: operations["PatchTenantTeamProjectEnrollmentAsync"];
  };
  "/api/v2/TeamRecords": {
    /**
     * Retrieve a list of tenant team records related to a specific tenant
     * @description Retrieve a list of tenant team records related to a specific tenant
     */
    get: operations["GetTenantTeamRecordsAsync"];
    /**
     * Create a new tenant team record
     * @description Create a new tenant team record
     */
    post: operations["CreateTenantTeamRecordAsync"];
  };
  "/api/v2/TeamRecords/{tenantTeamId}": {
    /**
     * Retrieve a single tenant team record by its ID
     * @description Retrieve a single tenant team record by its ID
     */
    get: operations["GetTenantTeamRecordByIdAsync"];
    /**
     * Updates a tenant team record
     * @description Updates a tenant team record
     */
    put: operations["UpdateTenantTeamRecordAsync"];
    /**
     * Delete a tenant team record by its ID
     * @description Delete a tenant team record by its ID
     */
    delete: operations["DeleteTenantTeamRecordAsync"];
    /**
     * Partially updates a tenant team record
     * @description Partially updates a tenant team record
     */
    patch: operations["PatchTenantTeamRecordAsync"];
  };
  "/api/v2/Teams": {
    /**
     * Retrieve a list of tenant teams related to a specific tenant
     * @description Retrieve a list of tenant teams related to a specific tenant
     */
    get: operations["GetTenantTeamsAsync"];
    /**
     * Create a new tenant team
     * @description Create a new tenant team
     */
    post: operations["CreateTenantTeamAsync"];
  };
  "/api/v2/Teams/{tenantTeamId}": {
    /**
     * Retrieve a single tenant team by its ID
     * @description Retrieve a single tenant team by its ID
     */
    get: operations["GetTenantTeamByIdAsync"];
    /**
     * Updates a tenant team
     * @description Updates a tenant team and returns an envelope.
     */
    put: operations["UpdateTenantTeamAsync"];
    /**
     * Delete a tenant team by its ID
     * @description Delete a tenant team by its ID
     */
    delete: operations["DeleteTenantTeamAsync"];
    /**
     * Partially updates a tenant team by its ID
     * @description Partially updates a tenant team by its ID
     */
    patch: operations["PatchTenantTeamAsync"];
  };
  "/api/v2/Tenants/Root": {
    /**
     * Get the root tenant of the platform
     * @description Get the root tenant of the platform
     */
    get: operations["GetRootTenantAsync"];
  };
  "/api/v2/Tenants/Current": {
    /**
     * Get the user's current default tenant
     * @description Get the user's current default tenant
     */
    get: operations["GetCurrentTenantAsync"];
  };
  "/api/v2/Tenants/{tenantId}": {
    /**
     * Get a specific tenant by ID
     * @description Get a specific tenant by ID
     */
    get: operations["GetTenantAsync"];
    /**
     * Update a tenant's profile
     * @description Update a tenant's profile
     */
    put: operations["UpdateTenantAsync"];
    /**
     * Patch a tenant's profile
     * @description Patch a tenant's profile
     */
    patch: operations["PatchTenantAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Extended": {
    /**
     * Get an extended tenant's business profile
     * @description Get an extended tenant's business profile
     */
    get: operations["GetExtendedTenantAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Avatar": {
    /**
     * Get a tenant's avatar
     * @description Get a tenant's avatar
     */
    get: operations["GetTenantAvatarAsync"];
    /**
     * Update a tenant's avatar
     * @description Update a tenant's avatar
     */
    post: operations["UpdateAvatarAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Wallet": {
    /**
     * Get a tenant's billing profile (A.K.A. Wallet Account)
     * @description Get a tenant's billing profile (A.K.A. Wallet Account)
     */
    get: operations["GetTenantWalletAsync"];
  };
  "/api/v2/Tenants/{tenantId}/SocialProfile": {
    /**
     * Get a tenant's social profile
     * @description Get a tenant's social profile
     */
    get: operations["GetTenantSocialProfileAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Cart": {
    /**
     * Get a tenant's default cart
     * @description Get a tenant's default cart
     */
    get: operations["GetTenantCartAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Users": {
    /**
     * Get the list of users enrolled in a tenant
     * @description Get the list of users enrolled in a tenant
     */
    get: operations["GetTenantUsersAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments": {
    /**
     * Get the list of user enrollments for a tenant
     * @description Get the list of user enrollments for a tenant
     */
    get: operations["GetTenantEnrollmentsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{enrollmentId}": {
    /**
     * Get a specific tenant enrollment
     * @description Get a specific tenant enrollment
     */
    get: operations["GetTenantEnrollmentAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{enrollmentId}/Extended": {
    /**
     * Get a specific tenant enrollment
     * @description Get a specific tenant enrollment
     */
    get: operations["GetExtendedTenantEnrollmentAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{enrollmentId}/Permissions": {
    /**
     * Get a specific tenant enrollment's permissions list
     * @description Get a specific tenant enrollment's permissions list
     */
    get: operations["GetEnrollmentPermissionsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{EnrollmentID}/Permissions/Validate": {
    /**
     * Validate the existence of a list of roles and permissions for a specific enrollment
     * @description Validate the existence of a list of roles and permissions for a specific enrollment
     */
    get: operations["GetEnrollmentPermissionsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Invitations": {
    /**
     * Get the list of invitations issued by a tenant
     * @description Get the list of invitations issued by a tenant
     */
    get: operations["GetTenantInvitationsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Invitations/Pending": {
    /**
     * Get the list of invitations issued by a tenant that are pending
     * @description Get the list of invitations issued by a tenant that are pending
     */
    get: operations["GetTenantPendingInvitationsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Invitations/Redeemed": {
    /**
     * Get the list of invitations issued by a tenant that have been redeemed
     * @description Get the list of invitations issued by a tenant that have been redeemed
     */
    get: operations["GetTenantRedeemedInvitationsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Invitations/Revoked": {
    /**
     * Get the list of invitations issued by a tenant that have been revoked
     * @description Get the list of invitations issued by a tenant that have been revoked
     */
    get: operations["GetTenantRevokedInvitationsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Licenses": {
    /**
     * Get the list of licenses available to a tenant
     * @description Get the list of licenses available to a tenant
     */
    get: operations["GetTenantLicensesAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{EnrollmentId}/Licenses": {
    /**
     * Get the list of licenses available to a specific enrollment
     * @description Get the list of licenses available to a specific enrollment
     */
    get: operations["GetEnrollmentLicensesAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{EnrollmentId}/Licenses/{licenseId}": {
    /**
     * Get the list of licenses available to a specific enrollment
     * @description Get the list of licenses available to a specific enrollment
     */
    get: operations["GetEnrollmentLicensesAsync"];
    /**
     * Assign a license to a specific enrollment
     * @description Assign a license to a specific enrollment
     */
    post: operations["AssignLicenseAsync"];
    /**
     * Revoke a license from a specific enrollment
     * @description Revoke a license from a specific enrollment
     */
    delete: operations["RevokeLicenseAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{enrollmentId}/Features": {
    /**
     * Get the list of features accessible to a specific enrollment
     * @description Get the list of features accessible to a specific enrollment
     */
    get: operations["GetAccessibleFeaturesAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Enrollments/{enrollmentId}/HasAccess": {
    /**
     * Validate the access to a specific feature for a specific enrollment
     * @description Validate the access to a specific feature for a specific enrollment
     */
    get: operations["ValidateEnrollmentFeatureAccess"];
  };
  "/api/v2/Tenants": {
    /**
     * Create a new business tenant
     * @description Create a new business tenant
     */
    post: operations["CreateTenantAsync"];
    /**
     * Delete a tenant
     * @description Delete a business tenant
     */
    delete: operations["DeleteTenantAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Select": {
    /**
     * Select a business tenant as the user's default tenant
     * @description Select a business tenant as the user's default tenant
     */
    get: operations["SelectTenantAsync"];
    /**
     * Select a business tenant as the user's default tenant
     * @description Select a business tenant as the user's default tenant
     */
    post: operations["SelectTenantAsync"];
  };
  "/api/v2/Tenants/Deselect": {
    /**
     * Deselect the user's default tenant
     * @description Deselect the user's default tenant
     */
    get: operations["DeSelectTenantAsync"];
    /**
     * Deselect the user's default tenant
     * @description Deselect the user's default tenant
     */
    post: operations["DeSelectTenantAsync"];
  };
  "/api/v2/Tenants/{tenantId}/WebPortals": {
    /**
     * Get the list of web portals for a tenant
     * @description Get the list of web portals for a tenant
     */
    get: operations["GetTenantWebPortalsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Notifications": {
    /**
     * Get the list of notifications for a tenant
     * @description Get the list of notifications for a tenant
     */
    get: operations["GetTenantNotificationsAsync"];
  };
  "/api/v2/Tenants/{tenantId}/Notifications/Count": {
    /**
     * Get the count of notifications for a tenant
     * @description Get the count of notifications for a tenant
     */
    get: operations["GetTenantNotificationsCountAsync"];
  };
  "/api/v2/Territories": {
    /**
     * Retrieve a list of tenant territories for a specific tenant
     * @description Retrieve a list of tenant territories for a specific tenant
     */
    get: operations["GetTenantTerritoriesAsync"];
    /**
     * Create a new tenant territory
     * @description Create a new tenant territory
     */
    post: operations["CreateTenantTerritoryAsync"];
  };
  "/api/v2/Territories/{tenantTerritoryId}": {
    /**
     * Retrieve a single tenant territory by its ID
     * @description Retrieve a single tenant territory by its ID
     */
    get: operations["GetTenantTerritoryByIdAsync"];
    /**
     * Update a tenant territory
     * @description Update a tenant territory
     */
    put: operations["PutTenantTerritoryAsync"];
    /**
     * Delete a tenant territory
     * @description Delete a tenant territory
     */
    delete: operations["DeleteTenantTerritoryAsync"];
    /**
     * Partially update a tenant territory
     * @description Partially update a tenant territory
     */
    patch: operations["PatchTenantTerritoryAsync"];
  };
  "/api/v2/Types": {
    /**
     * Retrieve a list of tenant types for a specific tenant
     * @description Retrieve a list of tenant types for a specific tenant
     */
    get: operations["GetTenantTypesAsync"];
    /**
     * Create a new tenant type
     * @description Create a new tenant type
     */
    post: operations["CreateTenantTypeAsync"];
  };
  "/api/v2/Types/{tenantTypeId}": {
    /**
     * Retrieve a single tenant type by its ID
     * @description Retrieve a single tenant type by its ID
     */
    get: operations["GetTenantTypeByIdAsync"];
    /**
     * Updates a tenant type
     * @description Updates a tenant type and returns an envelope
     */
    put: operations["UpdateTenantTypeAsync"];
    /**
     * Delete a tenant type by its ID
     * @description Delete a tenant type by its ID
     */
    delete: operations["DeleteTenantTypeAsync"];
    /**
     * Partially updates a tenant type by its ID
     * @description Partially updates a tenant type by its ID
     */
    patch: operations["PatchTenantTypeAsync"];
  };
  "/api/v2/Units": {
    /**
     * Get list of tenant units related to a tenant
     * @description Get list of tenant units related to a tenant
     */
    get: operations["GetTenantUnitsAsync"];
    /**
     * Create a new tenant unit
     * @description Create a new tenant unit
     */
    post: operations["CreateTenantUnitAsync"];
    /**
     * Partially updates a tenant unit
     * @description Partially updates a tenant unit
     */
    patch: operations["PatchTenantUnitAsync"];
  };
  "/api/v2/Units/{tenantUnitId}": {
    /**
     * Get single tenant unit by ID
     * @description Get single tenant unit by ID
     */
    get: operations["GetTenantUnitByIdAsync"];
    /**
     * Update tenant unit details
     * @description Update tenant unit details
     */
    put: operations["PutTenantUnitAsync"];
    /**
     * Delete tenant unit by ID
     * @description Delete tenant unit by ID
     */
    delete: operations["DeleteTenantUnitAsync"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BooleanEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: boolean;
    };
    CartDto: {
      id?: string | null;
      ip?: string | null;
      type?: string | null;
      /** Format: double */
      total?: number;
      /** Format: double */
      taxes?: number;
      /** Format: double */
      freight?: number;
      /** Format: double */
      subTotal?: number;
      currencyId?: string | null;
      countryId?: string | null;
      /** Format: int32 */
      itemCartRecordsCount?: number | null;
      /** Format: int32 */
      itemToCompareRecordsCount?: number | null;
    };
    CartDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["CartDto"];
    };
    EmptyEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ErrorEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ExtendedTenantDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      qualifiedName?: string | null;
      taxId?: string | null;
      about?: string | null;
      walletId?: string | null;
      socialFeedId?: string | null;
      businessIndustryId?: string | null;
      businessSegmentId?: string | null;
      socialProfileId?: string | null;
      languageId?: string | null;
      name?: string | null;
      duns?: string | null;
      slogan?: string | null;
      legalName?: string | null;
      coverUrl?: string | null;
      avatarUrl?: string | null;
      cartId?: string | null;
      currencyId?: string | null;
      timezoneId?: string | null;
      countryId?: string | null;
      stateId?: string | null;
      cityId?: string | null;
      email?: string | null;
      phone?: string | null;
      webUrl?: string | null;
      facebookUrl?: string | null;
      twitterUrl?: string | null;
      gitHubUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      youTubeUrl?: string | null;
      whatsAppNumber?: string | null;
      supportPhoneNumber?: string | null;
      verified?: boolean;
      businessName?: string | null;
      businessLegalName?: string | null;
      twitterUsername?: string | null;
      cart?: components["schemas"]["CartDto"];
      wallet?: components["schemas"]["WalletDto"];
      socialProfile?: components["schemas"]["SocialProfileDto"];
    };
    ExtendedTenantDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ExtendedTenantDto"];
    };
    ExtendedTenantEnrolmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      tenantId?: string | null;
      userId?: string | null;
      isRoot?: boolean;
      isOwner?: boolean;
      isAdmin?: boolean;
      isDisabled?: boolean;
      tenant?: components["schemas"]["TenantDto"];
      user?: components["schemas"]["UserDto"];
    };
    ExtendedTenantEnrolmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ExtendedTenantEnrolmentDto"];
    };
    Int32Envelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      /** Format: int32 */
      result?: number;
    };
    NotificationDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      read?: boolean;
      icon?: string | null;
      message?: string | null;
      redirectUrl?: string | null;
      socialProfileID?: string | null;
      /** Format: date-time */
      readTimestamp?: string;
      /** Format: date-time */
      issuedTimestamp?: string;
    };
    NotificationDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["NotificationDto"][] | null;
    };
    Operation: {
      /**
       * Format: int32
       * @enum {integer}
       */
      operationType?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
      path?: string | null;
      op?: string | null;
      from?: string | null;
      value?: unknown;
    };
    SocialProfileDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      about?: string | null;
      cover?: string | null;
      avatar?: string | null;
      countryId?: string | null;
      countryName?: string | null;
      identityId?: string | null;
      /** Format: int32 */
      followsCount?: number | null;
      /** Format: int32 */
      messagesCount?: number | null;
      /** Format: int32 */
      followersCount?: number | null;
      /** Format: int32 */
      notificationsCount?: number | null;
      /** Format: int32 */
      unreadNotificationsCount?: number | null;
      /** Format: int32 */
      unreadMessagesCount?: number | null;
      /**
       * Format: int32
       * @enum {integer|null}
       */
      type?: 0 | 1 | 2 | null;
      socialFeedId?: string | null;
      twitterUrl?: string | null;
      facebookURL?: string | null;
      linkedInURL?: string | null;
      youtubeURL?: string | null;
      githubURL?: string | null;
      pinterestURL?: string | null;
      dribbleURL?: string | null;
      domain?: string | null;
      notes?: string | null;
    };
    SocialProfileDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialProfileDto"];
    };
    StringListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: string[] | null;
    };
    SuiteLicenseAssignmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      assigned?: boolean;
      enrollmentId?: string | null;
      suiteLicenseId?: string | null;
      /** Format: date-time */
      expirationDate?: string;
      /** Format: int32 */
      availableSeats?: number;
      /** Format: int32 */
      totalSeats?: number;
    };
    SuiteLicenseAssignmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SuiteLicenseAssignmentDto"][] | null;
    };
    SuiteLicenseDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      tenantId?: string | null;
      licenseString?: string | null;
      enrollmentId?: string | null;
      /** Format: date-time */
      expirationDate?: string;
      /** Format: int32 */
      availableSeats?: number;
      /** Format: int32 */
      totalSeats?: number;
    };
    SuiteLicenseDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SuiteLicenseDto"][] | null;
    };
    SuiteLicenseFeatureDto: {
      key?: string | null;
      value?: string | null;
    };
    SuiteLicenseFeatureDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SuiteLicenseFeatureDto"][] | null;
    };
    TenantCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      duns?: string | null;
      name?: string | null;
      legalName?: string | null;
      email?: string | null;
      phone?: string | null;
      webUrl?: string | null;
      about?: string | null;
      handler?: string | null;
      currencyId?: string | null;
      languageId?: string | null;
      timezoneId?: string | null;
      cityId?: string | null;
      stateId?: string | null;
      countryId?: string | null;
      taxId?: string | null;
      avatarUrl?: string | null;
    };
    TenantDepartmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      disabled?: boolean;
      organizationProfileID?: string | null;
      parentDepartmentID?: string | null;
    };
    TenantDepartmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      disabled?: boolean;
      organizationProfileID?: string | null;
      parentDepartmentID?: string | null;
    };
    TenantDepartmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantDepartmentDto"];
    };
    TenantDepartmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantDepartmentDto"][] | null;
    };
    TenantDepartmentUpdateDto: {
      name?: string | null;
      description?: string | null;
      disabled?: boolean;
      organizationProfileID?: string | null;
      parentDepartmentID?: string | null;
    };
    TenantDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      qualifiedName?: string | null;
      taxId?: string | null;
      about?: string | null;
      walletId?: string | null;
      socialFeedId?: string | null;
      businessIndustryId?: string | null;
      businessSegmentId?: string | null;
      socialProfileId?: string | null;
      languageId?: string | null;
      name?: string | null;
      duns?: string | null;
      slogan?: string | null;
      legalName?: string | null;
      coverUrl?: string | null;
      avatarUrl?: string | null;
      cartId?: string | null;
      currencyId?: string | null;
      timezoneId?: string | null;
      countryId?: string | null;
      stateId?: string | null;
      cityId?: string | null;
      email?: string | null;
      phone?: string | null;
      webUrl?: string | null;
      facebookUrl?: string | null;
      twitterUrl?: string | null;
      gitHubUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      youTubeUrl?: string | null;
      whatsAppNumber?: string | null;
      supportPhoneNumber?: string | null;
      verified?: boolean;
      businessName?: string | null;
      businessLegalName?: string | null;
      twitterUsername?: string | null;
    };
    TenantDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantDto"];
    };
    TenantEnrollmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      tenantId?: string | null;
      userId?: string | null;
    };
    TenantEnrollmentUpdateDto: {
      isAdmin?: boolean;
      isDisabled?: boolean;
    };
    TenantEnrolmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      tenantId?: string | null;
      userId?: string | null;
      isRoot?: boolean;
      isOwner?: boolean;
      isAdmin?: boolean;
      isDisabled?: boolean;
    };
    TenantEnrolmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantEnrolmentDto"];
    };
    TenantEnrolmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantEnrolmentDto"][] | null;
    };
    TenantIndustryCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      name?: string | null;
      parentBusinessIndustryID?: string | null;
      businessProfileRecordID?: string | null;
    };
    TenantIndustryDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      parentBusinessIndustryID?: string | null;
      businessProfileRecordID?: string | null;
    };
    TenantIndustryDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantIndustryDto"];
    };
    TenantIndustryDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantIndustryDto"][] | null;
    };
    TenantIndustryUpdateDto: {
      name?: string | null;
      parentBusinessIndustryID?: string | null;
      businessProfileRecordID?: string | null;
    };
    TenantInvitationCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      /** Format: email */
      userEmail: string;
      tenantId?: string | null;
      enrollmentId?: string | null;
    };
    TenantInvitationDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      tenantId?: string | null;
      revoked?: boolean;
      redeemed?: boolean;
      /** Format: date-time */
      redeemedTimestamp?: string | null;
      userEmail?: string | null;
      creatorEnrollmentId?: string | null;
      relatedEnrollmentId?: string | null;
    };
    TenantInvitationDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantInvitationDto"];
    };
    TenantInvitationDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantInvitationDto"][] | null;
    };
    TenantPositionCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      title?: string | null;
      description?: string | null;
    };
    TenantPositionDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      title?: string | null;
      description?: string | null;
    };
    TenantPositionDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantPositionDto"];
    };
    TenantPositionDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantPositionDto"][] | null;
    };
    TenantPositionUpdateDto: {
      title?: string | null;
      description?: string | null;
    };
    TenantSegmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      revenue?: string | null;
      /** Format: double */
      minEmployees?: number;
      /** Format: double */
      maxEmployees?: number;
    };
    TenantSegmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      revenue?: string | null;
      /** Format: double */
      minEmployees?: number;
      /** Format: double */
      maxEmployees?: number;
    };
    TenantSegmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantSegmentDto"];
    };
    TenantSegmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantSegmentDto"][] | null;
    };
    TenantSegmentUpdateDto: {
      revenue?: string | null;
      /** Format: double */
      minEmployees?: number;
      /** Format: double */
      maxEmployees?: number;
    };
    TenantSizeCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      name?: string | null;
      /** Format: int32 */
      employeeLowRangeValue?: number;
      /** Format: int32 */
      employeeHighRangeValue?: number;
    };
    TenantSizeDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      /** Format: int32 */
      employeeLowRangeValue?: number;
      /** Format: int32 */
      employeeHighRangeValue?: number;
    };
    TenantSizeDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantSizeDto"];
    };
    TenantSizeDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantSizeDto"][] | null;
    };
    TenantSizeUpdateDto: {
      name?: string | null;
      /** Format: int32 */
      employeeLowRangeValue?: number;
      /** Format: int32 */
      employeeHighRangeValue?: number;
    };
    TenantTeamContactEnrollmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID: string;
      businessProfileRecordID: string;
      businessTeamID: string;
      contactID: string;
    };
    TenantTeamContactEnrollmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      teamId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
      contactID?: string | null;
    };
    TenantTeamContactEnrollmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamContactEnrollmentDto"];
    };
    TenantTeamContactEnrollmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamContactEnrollmentDto"][] | null;
    };
    TenantTeamContactEnrollmentUpdateDto: {
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      businessTeamID?: string | null;
      contactID?: string | null;
    };
    TenantTeamCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID: string;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      /** Format: uri */
      avatarURL?: string | null;
      isPublic?: boolean;
      businessUnitID?: string | null;
      organizationProfileID?: string | null;
    };
    TenantTeamDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      avatarURL?: string | null;
      isPublic?: boolean;
      businessUnitID?: string | null;
      organizationProfileID?: string | null;
    };
    TenantTeamDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamDto"];
    };
    TenantTeamDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamDto"][] | null;
    };
    TenantTeamEmployeeEnrollmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID: string;
      businessProfileRecordID: string;
      businessTeamID: string;
      employeeProfileID: string;
    };
    TenantTeamEmployeeEnrollmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      teamId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
      employeeProfileId?: string | null;
    };
    TenantTeamEmployeeEnrollmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamEmployeeEnrollmentDto"];
    };
    TenantTeamEmployeeEnrollmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamEmployeeEnrollmentDto"][] | null;
    };
    TenantTeamEmployeeEnrollmentUpdateDto: {
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      businessTeamID?: string | null;
      employeeProfileID?: string | null;
    };
    TenantTeamProjectEnrollmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID: string;
      businessProfileRecordID: string;
      businessTeamID: string;
      projectID: string;
    };
    TenantTeamProjectEnrollmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      teamId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
      projectID?: string | null;
    };
    TenantTeamProjectEnrollmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamProjectEnrollmentDto"];
    };
    TenantTeamProjectEnrollmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamProjectEnrollmentDto"][] | null;
    };
    TenantTeamProjectEnrollmentUpdateDto: {
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      businessTeamID?: string | null;
      projectID?: string | null;
    };
    TenantTeamRecordCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID: string;
      businessProfileRecordID: string;
      businessTeamID: string;
    };
    TenantTeamRecordDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      teamId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
    };
    TenantTeamRecordDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamRecordDto"];
    };
    TenantTeamRecordDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTeamRecordDto"][] | null;
    };
    TenantTeamRecordUpdateDto: {
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      businessTeamID?: string | null;
    };
    TenantTeamUpdateDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      avatarURL?: string | null;
      isPublic?: boolean;
      businessUnitID?: string | null;
      organizationProfileID?: string | null;
    };
    TenantTerritoryCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      parentTerritoryID?: string | null;
    };
    TenantTerritoryDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      parentTerritoryID?: string | null;
    };
    TenantTerritoryDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTerritoryDto"];
    };
    TenantTerritoryDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTerritoryDto"][] | null;
    };
    TenantTerritoryUpdateDto: {
      name?: string | null;
      description?: string | null;
    };
    TenantTypeCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      name?: string | null;
      description?: string | null;
    };
    TenantTypeDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      description?: string | null;
    };
    TenantTypeDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTypeDto"];
    };
    TenantTypeDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantTypeDto"][] | null;
    };
    TenantTypeUpdateDto: {
      name?: string | null;
      description?: string | null;
    };
    TenantUnitCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      disabled?: boolean;
      businessUnitQualifiedName?: string | null;
      countryID?: string | null;
      organizationProfileID?: string | null;
      parentBusinessUnitID?: string | null;
    };
    TenantUnitDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      businessID?: string | null;
      businessProfileRecordID?: string | null;
      name?: string | null;
      description?: string | null;
      disabled?: boolean;
      businessUnitQualifiedName?: string | null;
      countryID?: string | null;
      organizationProfileID?: string | null;
      parentBusinessUnitID?: string | null;
    };
    TenantUnitDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantUnitDto"];
    };
    TenantUnitDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["TenantUnitDto"][] | null;
    };
    TenantUnitUpdateDto: {
      name?: string | null;
      description?: string | null;
      disabled?: boolean;
      businessUnitQualifiedName?: string | null;
      countryID?: string | null;
      organizationProfileID?: string | null;
      parentBusinessUnitID?: string | null;
    };
    TenantUpdateDto: {
      name?: string | null;
      duns?: string | null;
      slogan?: string | null;
      legalName?: string | null;
      phone?: string | null;
      webUrl?: string | null;
      twitterUsername?: string | null;
      facebookUrl?: string | null;
      twitterUrl?: string | null;
      gitHubUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      youTubeUrl?: string | null;
      whatsAppNumber?: string | null;
      supportPhoneNumber?: string | null;
      taxId?: string | null;
      about?: string | null;
      currencyId?: string | null;
      timezoneId?: string | null;
      languageId?: string | null;
      countryId?: string | null;
      stateId?: string | null;
      cityId?: string | null;
      email?: string | null;
    };
    UserDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      fullName?: string | null;
      qualifiedName?: string | null;
      publicName?: string | null;
      lastName?: string | null;
      firstName?: string | null;
      coverUrl?: string | null;
      avatarUrl?: string | null;
      gitHubUrl?: string | null;
      countryId?: string | null;
      timezoneId?: string | null;
      websiteUrl?: string | null;
      twitterUrl?: string | null;
      youTubeUrl?: string | null;
      linkedInUrl?: string | null;
      facebookUrl?: string | null;
      instagramUrl?: string | null;
      socialProfileId?: string | null;
      /** Format: date-time */
      birthday?: string | null;
      idProvider?: string | null;
      languageId?: string | null;
      /**
       * Format: int32
       * @enum {integer|null}
       */
      gender?: 0 | 1 | 2 | null;
      cityId?: string | null;
      stateId?: string | null;
      email?: string | null;
      about?: string | null;
      jobTitle?: string | null;
      socialFeedId?: string | null;
      currentTenantId?: string | null;
      currentEnrollmentId?: string | null;
      status?: string | null;
      cartId?: string | null;
      walletId?: string | null;
      userName?: string | null;
      currencyId?: string | null;
      phoneNumber?: string | null;
      publicIdentifier?: string | null;
      identityProvider?: string | null;
      phoneNumberConfirmed?: boolean;
      emailConfirmed?: boolean;
      /**
       * Format: int32
       * @enum {integer|null}
       */
      availability?: 0 | 1 | 2 | 3 | 4 | null;
      lockoutEnabled?: boolean;
      /** Format: date-time */
      lockoutEnd?: string | null;
      /** Format: int32 */
      enrollmentsCount?: number | null;
      /**
       * Format: int32
       * @enum {integer|null}
       */
      siteTheme?: 0 | 1 | 2 | null;
    };
    UserDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["UserDto"][] | null;
    };
    WalletDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string;
      /** Format: double */
      balance?: number;
      /** Format: double */
      cryptoBalance?: number;
      testMode?: boolean;
      verified?: boolean;
      type?: string | null;
      currencyId?: string | null;
      /** Format: double */
      forexRate?: number;
      /** Format: double */
      balanceInUsd?: number;
      /** Format: double */
      mainNetEtherBalance?: number;
      ethereumAddress?: string | null;
      ethereumPublicKey?: string | null;
      ethereumPrivateKey?: string | null;
      /** Format: double */
      rollingReservePercent?: number;
    };
    WalletDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["WalletDto"];
    };
    WebPortalDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      root?: boolean;
      title?: string | null;
      domain?: string | null;
      disabled?: boolean;
      tenantId?: string | null;
      description?: string | null;
      websiteThemeID?: string | null;
      businessDomainID?: string | null;
      businessProfileRecordID?: string | null;
      businessPortalApplicationID?: string | null;
    };
    WebPortalDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["WebPortalDto"][] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Retrieve a list of tenant departments
   * @description Retrieve a list of tenant departments
   */
  GetTenantDepartments: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDepartmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantDepartmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant department
   * @description Create a new tenant department
   */
  CreateTenantDepartment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantDepartmentCreateDto"];
        "application/xml": components["schemas"]["TenantDepartmentCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant department by its ID
   * @description Retrieve a single tenant department by its ID
   */
  GetTenantDepartmentById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantDepartmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDepartmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDepartmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant department
   * @description Update a tenant department
   */
  UpdateTenantDepartment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantDepartmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantDepartmentUpdateDto"];
        "application/xml": components["schemas"]["TenantDepartmentUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant department
   * @description Delete a tenant department
   */
  DeleteTenantDepartment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantDepartmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant department
   * @description Partially update a tenant department
   */
  PatchTenantDepartment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantDepartmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant team employee enrollments
   * @description Retrieve a list of tenant team employee enrollments
   */
  GetTenantTeamEmployeeEnrollments: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant team employee enrollment
   * @description Create a new tenant team employee enrollment
   */
  CreateTenantTeamEmployeeEnrollment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentCreateDto"];
        "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant team employee enrollment by its ID
   * @description Retrieve a single tenant team employee enrollment by its ID
   */
  GetTenantTeamEmployeeEnrollmentById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant team employee enrollment
   * @description Update a tenant team employee enrollment
   */
  UpdateTenantTeamEmployeeEnrollment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentUpdateDto"];
        "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Deletes a tenant team employee enrollment
   * @description Deletes a tenant team employee enrollment
   */
  DeleteTenantTeamEmployeeEnrollment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant team employee enrollment
   * @description Partially update a tenant team employee enrollment
   */
  PatchTenantTeamEmployeeEnrollment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamEmployeeEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant enrollments
   * @description Retrieve a list of tenant enrollments
   */
  GetTenantEnrollments: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantEnrolmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantEnrolmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant enrollment
   * @description Create a new tenant enrollment
   */
  CreateTenantEnrollment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantEnrollmentCreateDto"];
        "application/xml": components["schemas"]["TenantEnrollmentCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant enrollment by its ID
   * @description Retrieve a single tenant enrollment by its ID
   */
  GetTenantEnrollmentById: {
    parameters: {
      query: {
        tenantId: string;
        userId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantEnrolmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantEnrolmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant enrollment
   * @description Update a tenant enrollment
   */
  UpdateTenantEnrollment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantEnrollmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantEnrollmentUpdateDto"];
        "application/xml": components["schemas"]["TenantEnrollmentUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant enrollment
   * @description Delete a tenant enrollment
   */
  DeleteTenantEnrollment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantEnrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant enrollment
   * @description Partially update a tenant enrollment
   */
  PatchTenantEnrollment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantEnrollmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant industries
   * @description Retrieve a list of tenant industries
   */
  GetTenantIndustries: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantIndustryDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantIndustryDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant industry
   * @description Create a new tenant industry
   */
  CreateTenantIndustry: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantIndustryCreateDto"];
        "application/xml": components["schemas"]["TenantIndustryCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantIndustryDtoEnvelope"];
          "application/xml": components["schemas"]["TenantIndustryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant industry by its ID
   * @description Retrieve a single tenant industry by its ID
   */
  GetTenantIndustryById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantIndustryId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantIndustryDtoEnvelope"];
          "application/xml": components["schemas"]["TenantIndustryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant industry
   * @description Update a tenant industry
   */
  UpdateTenantIndustry: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantIndustryId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantIndustryUpdateDto"];
        "application/xml": components["schemas"]["TenantIndustryUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantIndustryDtoEnvelope"];
          "application/xml": components["schemas"]["TenantIndustryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant industry
   * @description Delete a tenant industry
   */
  DeleteTenantIndustry: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantIndustryId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantIndustryDtoEnvelope"];
          "application/xml": components["schemas"]["TenantIndustryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant industry
   * @description Partially update a tenant industry
   */
  PatchTenantIndustry: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantIndustryId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantIndustryDtoEnvelope"];
          "application/xml": components["schemas"]["TenantIndustryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get an invitation by its ID
   * @description Get an invitation by its ID
   */
  GetInvitation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        invitationId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": string;
        "application/xml": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantInvitationDtoEnvelope"];
          "application/xml": components["schemas"]["TenantInvitationDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete an invitation
   * @description Delete an invitation
   */
  DeleteInvitation: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        invitationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Send an invitation to a user to join a tenant
   * @description Send an invitation to a user to join a tenant
   */
  SendInvitation: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantInvitationCreateDto"];
        "application/xml": components["schemas"]["TenantInvitationCreateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Decline an invitation to join a tenant
   * @description Decline an invitation to join a tenant
   */
  DeclineInvitation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        invitationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Accept an invitation to join a tenant
   * @description Accept an invitation to join a tenant
   */
  AcceptInvitation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        invitationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant positions
   * @description Retrieve a list of tenant positions
   */
  GetTenantPositions: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantPositionDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantPositionDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant position
   * @description Create a new tenant position
   */
  CreateTenantPosition: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantPositionCreateDto"];
        "application/xml": components["schemas"]["TenantPositionCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant position by its ID
   * @description Retrieve a single tenant position by its ID
   */
  GetTenantPositionById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantPositionId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantPositionDtoEnvelope"];
          "application/xml": components["schemas"]["TenantPositionDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant position
   * @description Update a tenant position
   */
  UpdateTenantPosition: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantPositionId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantPositionUpdateDto"];
        "application/xml": components["schemas"]["TenantPositionUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant position
   * @description Delete a tenant position
   */
  DeleteTenantPosition: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantPositionId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant position
   * @description Partially update a tenant position
   */
  PatchTenantPosition: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantPositionId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant segments for a specific tenant
   * @description Retrieve a list of tenant segments for a specific tenant
   */
  GetTenantSegments: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSegmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantSegmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant segment
   * @description Create a new tenant segment
   */
  CreateTenantSegment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantSegmentCreateDto"];
        "application/xml": components["schemas"]["TenantSegmentCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantSegmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSegmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant segment by its ID
   * @description Retrieve a single tenant segment by its ID
   */
  GetTenantSegmentById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSegmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSegmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSegmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant segment
   * @description Update a tenant segment
   */
  UpdateTenantSegment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSegmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantSegmentUpdateDto"];
        "application/xml": components["schemas"]["TenantSegmentUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSegmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSegmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant segment
   * @description Delete a tenant segment
   */
  DeleteTenantSegment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSegmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSegmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSegmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant segment
   * @description Partially update a tenant segment
   */
  PatchTenantSegment: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSegmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSegmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSegmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieves a list of tenant sizes for a specific tenant
   * @description Retrieves a list of tenant sizes for a specific tenant and returns an envelope.
   */
  GetTenantSizesAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSizeDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantSizeDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Creates a new tenant size
   * @description Creates a new tenant size and returns an empty envelope.
   */
  CreateTenantSizeAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantSizeCreateDto"];
        "application/xml": components["schemas"]["TenantSizeCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieves a single tenant size by its ID
   * @description Retrieves a single tenant size by its ID and returns an envelope.
   */
  GetTenantSizeByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSizeId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSizeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSizeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Updates a tenant size
   * @description Updates a tenant size and returns an envelope.
   */
  UpdateTenantSizeAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSizeId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantSizeUpdateDto"];
        "application/xml": components["schemas"]["TenantSizeUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSizeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSizeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Deletes a tenant size by its ID
   * @description Deletes a tenant size by its ID and returns an envelope.
   */
  DeleteTenantSizeAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSizeId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantSizeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantSizeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant size
   * @description Partially updates a tenant size and returns an empty envelope.
   */
  PatchTenantSizeAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantSizeId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant team contact enrollments for a specific tenant
   * @description Retrieve a list of tenant team contact enrollments for a specific tenant
   */
  GetTenantTeamContactEnrollmentsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamContactEnrollmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTeamContactEnrollmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant team contact enrollment
   * @description Create a new tenant team contact enrollment
   */
  CreateTenantContactEnrollmentAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamContactEnrollmentCreateDto"];
        "application/xml": components["schemas"]["TenantTeamContactEnrollmentCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant team contact enrollment by its ID
   * @description Retrieve a single tenant team contact enrollment by its ID
   */
  GetTenantTeamContactEnrollmentByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamContactEnrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant team contact enrollment by its ID
   * @description Update a tenant team contact enrollment by its ID
   */
  UpdateTenantTeamContactEnrollmentAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamContactEnrollmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamContactEnrollmentUpdateDto"];
        "application/xml": components["schemas"]["TenantTeamContactEnrollmentUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant team contact enrollment
   * @description Delete a tenant team contact enrollment
   */
  DeleteTenantTeamContactEnrollmentAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamContactEnrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant team contact enrollment by its ID
   * @description Partially updates a tenant team contact enrollment by its ID
   */
  PatchTenantTeamContactEnrollmentAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamContactEnrollmentId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamContactEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant team project enrollments by tenant ID
   * @description Retrieve a list of tenant team project enrollments by tenant ID
   */
  GetTenantTeamProjectEnrollmentsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamProjectEnrollmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTeamProjectEnrollmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant team project enrollment
   * @description Create a new tenant team project enrollment
   */
  CreateTenantTeamProjectEnrollmentAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamProjectEnrollmentCreateDto"];
        "application/xml": components["schemas"]["TenantTeamProjectEnrollmentCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant team project enrollment by its ID
   * @description Retrieve a single tenant team project enrollment by its ID
   */
  GetTenantTeamProjectEnrollmentByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant team project enrollment
   * @description Update a tenant team project enrollment
   */
  UpdateTenantTeamProjectEnrollmentAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamProjectEnrollmentUpdateDto"];
        "application/xml": components["schemas"]["TenantTeamProjectEnrollmentUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant team project enrollment
   * @description Delete a tenant team project enrollment
   */
  DeleteTenantTeamProjectEnrollmentAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant team project enrollment
   * @description Partially updates a tenant team project enrollment
   */
  PatchTenantTeamProjectEnrollmentAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamProjectEnrollmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant team records related to a specific tenant
   * @description Retrieve a list of tenant team records related to a specific tenant
   */
  GetTenantTeamRecordsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamRecordDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTeamRecordDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant team record
   * @description Create a new tenant team record
   */
  CreateTenantTeamRecordAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamRecordCreateDto"];
        "application/xml": components["schemas"]["TenantTeamRecordCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantTeamRecordDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamRecordDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant team record by its ID
   * @description Retrieve a single tenant team record by its ID
   */
  GetTenantTeamRecordByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamRecordDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamRecordDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Updates a tenant team record
   * @description Updates a tenant team record
   */
  UpdateTenantTeamRecordAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamRecordUpdateDto"];
        "application/xml": components["schemas"]["TenantTeamRecordUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamRecordDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamRecordDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant team record by its ID
   * @description Delete a tenant team record by its ID
   */
  DeleteTenantTeamRecordAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamRecordDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamRecordDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant team record
   * @description Partially updates a tenant team record
   */
  PatchTenantTeamRecordAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant teams related to a specific tenant
   * @description Retrieve a list of tenant teams related to a specific tenant
   */
  GetTenantTeamsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTeamDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant team
   * @description Create a new tenant team
   */
  CreateTenantTeamAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamCreateDto"];
        "application/xml": components["schemas"]["TenantTeamCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantTeamDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant team by its ID
   * @description Retrieve a single tenant team by its ID
   */
  GetTenantTeamByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Updates a tenant team
   * @description Updates a tenant team and returns an envelope.
   */
  UpdateTenantTeamAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTeamUpdateDto"];
        "application/xml": components["schemas"]["TenantTeamUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant team by its ID
   * @description Delete a tenant team by its ID
   */
  DeleteTenantTeamAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTeamDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTeamDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant team by its ID
   * @description Partially updates a tenant team by its ID
   */
  PatchTenantTeamAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTeamId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the root tenant of the platform
   * @description Get the root tenant of the platform
   */
  GetRootTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the user's current default tenant
   * @description Get the user's current default tenant
   */
  GetCurrentTenantAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a specific tenant by ID
   * @description Get a specific tenant by ID
   */
  GetTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantDtoEnvelope"];
          "application/xml": components["schemas"]["TenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant's profile
   * @description Update a tenant's profile
   */
  UpdateTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantUpdateDto"];
        "application/xml": components["schemas"]["TenantUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Patch a tenant's profile
   * @description Patch a tenant's profile
   */
  PatchTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get an extended tenant's business profile
   * @description Get an extended tenant's business profile
   */
  GetExtendedTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedTenantDtoEnvelope"];
          "application/xml": components["schemas"]["ExtendedTenantDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a tenant's avatar
   * @description Get a tenant's avatar
   */
  GetTenantAvatarAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant's avatar
   * @description Update a tenant's avatar
   */
  UpdateAvatarAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar?: string;
        };
        "application/json": {
          /** Format: binary */
          avatar?: string;
        };
        "application/xml": {
          /** Format: binary */
          avatar?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "image/png": components["schemas"]["EmptyEnvelope"];
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "image/png": components["schemas"]["ErrorEnvelope"];
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "image/png": components["schemas"]["ErrorEnvelope"];
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a tenant's billing profile (A.K.A. Wallet Account)
   * @description Get a tenant's billing profile (A.K.A. Wallet Account)
   */
  GetTenantWalletAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletDtoEnvelope"];
          "application/xml": components["schemas"]["WalletDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a tenant's social profile
   * @description Get a tenant's social profile
   */
  GetTenantSocialProfileAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialProfileDtoEnvelope"];
          "application/xml": components["schemas"]["SocialProfileDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a tenant's default cart
   * @description Get a tenant's default cart
   */
  GetTenantCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of users enrolled in a tenant
   * @description Get the list of users enrolled in a tenant
   */
  GetTenantUsersAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserDtoListEnvelope"];
          "application/xml": components["schemas"]["UserDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of user enrollments for a tenant
   * @description Get the list of user enrollments for a tenant
   */
  GetTenantEnrollmentsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantEnrolmentDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantEnrolmentDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a specific tenant enrollment
   * @description Get a specific tenant enrollment
   */
  GetTenantEnrollmentAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantEnrolmentDtoEnvelope"];
          "application/xml": components["schemas"]["TenantEnrolmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a specific tenant enrollment
   * @description Get a specific tenant enrollment
   */
  GetExtendedTenantEnrollmentAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedTenantEnrolmentDtoEnvelope"];
          "application/xml": components["schemas"]["ExtendedTenantEnrolmentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Validate the existence of a list of roles and permissions for a specific enrollment
   * @description Validate the existence of a list of roles and permissions for a specific enrollment
   */
  GetEnrollmentPermissionsAsync: {
    parameters: {
      query?: {
        roles?: string[];
        permissions?: string[];
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of invitations issued by a tenant
   * @description Get the list of invitations issued by a tenant
   */
  GetTenantInvitationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantInvitationDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantInvitationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of invitations issued by a tenant that are pending
   * @description Get the list of invitations issued by a tenant that are pending
   */
  GetTenantPendingInvitationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantInvitationDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantInvitationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of invitations issued by a tenant that have been redeemed
   * @description Get the list of invitations issued by a tenant that have been redeemed
   */
  GetTenantRedeemedInvitationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantInvitationDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantInvitationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of invitations issued by a tenant that have been revoked
   * @description Get the list of invitations issued by a tenant that have been revoked
   */
  GetTenantRevokedInvitationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantInvitationDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantInvitationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of licenses available to a tenant
   * @description Get the list of licenses available to a tenant
   */
  GetTenantLicensesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SuiteLicenseDtoListEnvelope"];
          "application/xml": components["schemas"]["SuiteLicenseDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of licenses available to a specific enrollment
   * @description Get the list of licenses available to a specific enrollment
   */
  GetEnrollmentLicensesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
        licenseId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SuiteLicenseDtoListEnvelope"];
          "application/xml": components["schemas"]["SuiteLicenseDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Assign a license to a specific enrollment
   * @description Assign a license to a specific enrollment
   */
  AssignLicenseAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
        licenseId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SuiteLicenseDtoListEnvelope"];
          "application/xml": components["schemas"]["SuiteLicenseDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Revoke a license from a specific enrollment
   * @description Revoke a license from a specific enrollment
   */
  RevokeLicenseAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
        licenseId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SuiteLicenseDtoListEnvelope"];
          "application/xml": components["schemas"]["SuiteLicenseDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of features accessible to a specific enrollment
   * @description Get the list of features accessible to a specific enrollment
   */
  GetAccessibleFeaturesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SuiteLicenseFeatureDtoListEnvelope"];
          "application/xml": components["schemas"]["SuiteLicenseFeatureDtoListEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Validate the access to a specific feature for a specific enrollment
   * @description Validate the access to a specific feature for a specific enrollment
   */
  ValidateEnrollmentFeatureAccess: {
    parameters: {
      query?: {
        feature?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
        enrollmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new business tenant
   * @description Create a new business tenant
   */
  CreateTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantCreateDto"];
        "application/xml": components["schemas"]["TenantCreateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant
   * @description Delete a business tenant
   */
  DeleteTenantAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Select a business tenant as the user's default tenant
   * @description Select a business tenant as the user's default tenant
   */
  SelectTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Deselect the user's default tenant
   * @description Deselect the user's default tenant
   */
  DeSelectTenantAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of web portals for a tenant
   * @description Get the list of web portals for a tenant
   */
  GetTenantWebPortalsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebPortalDtoListEnvelope"];
          "application/xml": components["schemas"]["WebPortalDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the list of notifications for a tenant
   * @description Get the list of notifications for a tenant
   */
  GetTenantNotificationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationDtoListEnvelope"];
          "application/xml": components["schemas"]["NotificationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the count of notifications for a tenant
   * @description Get the count of notifications for a tenant
   */
  GetTenantNotificationsCountAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant territories for a specific tenant
   * @description Retrieve a list of tenant territories for a specific tenant
   */
  GetTenantTerritoriesAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTerritoryDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTerritoryDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant territory
   * @description Create a new tenant territory
   */
  CreateTenantTerritoryAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTerritoryCreateDto"];
        "application/xml": components["schemas"]["TenantTerritoryCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant territory by its ID
   * @description Retrieve a single tenant territory by its ID
   */
  GetTenantTerritoryByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTerritoryId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTerritoryDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTerritoryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a tenant territory
   * @description Update a tenant territory
   */
  PutTenantTerritoryAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTerritoryId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTerritoryUpdateDto"];
        "application/xml": components["schemas"]["TenantTerritoryUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant territory
   * @description Delete a tenant territory
   */
  DeleteTenantTerritoryAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTerritoryId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially update a tenant territory
   * @description Partially update a tenant territory
   */
  PatchTenantTerritoryAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTerritoryId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a list of tenant types for a specific tenant
   * @description Retrieve a list of tenant types for a specific tenant
   */
  GetTenantTypesAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTypeDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantTypeDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant type
   * @description Create a new tenant type
   */
  CreateTenantTypeAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTypeCreateDto"];
        "application/xml": components["schemas"]["TenantTypeCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TenantTypeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTypeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Retrieve a single tenant type by its ID
   * @description Retrieve a single tenant type by its ID
   */
  GetTenantTypeByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTypeId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTypeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTypeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Updates a tenant type
   * @description Updates a tenant type and returns an envelope
   */
  UpdateTenantTypeAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTypeId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantTypeUpdateDto"];
        "application/xml": components["schemas"]["TenantTypeUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTypeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTypeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a tenant type by its ID
   * @description Delete a tenant type by its ID
   */
  DeleteTenantTypeAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTypeId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTypeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTypeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant type by its ID
   * @description Partially updates a tenant type by its ID
   */
  PatchTenantTypeAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantTypeId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantTypeDtoEnvelope"];
          "application/xml": components["schemas"]["TenantTypeDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get list of tenant units related to a tenant
   * @description Get list of tenant units related to a tenant
   */
  GetTenantUnitsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantUnitDtoListEnvelope"];
          "application/xml": components["schemas"]["TenantUnitDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new tenant unit
   * @description Create a new tenant unit
   */
  CreateTenantUnitAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantUnitCreateDto"];
        "application/xml": components["schemas"]["TenantUnitCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Partially updates a tenant unit
   * @description Partially updates a tenant unit
   */
  PatchTenantUnitAsync: {
    parameters: {
      query: {
        tenantId: string;
        tenantUnitId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get single tenant unit by ID
   * @description Get single tenant unit by ID
   */
  GetTenantUnitByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantUnitId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TenantUnitDtoEnvelope"];
          "application/xml": components["schemas"]["TenantUnitDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update tenant unit details
   * @description Update tenant unit details
   */
  PutTenantUnitAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantUnitId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TenantUnitUpdateDto"];
        "application/xml": components["schemas"]["TenantUnitUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete tenant unit by ID
   * @description Delete tenant unit by ID
   */
  DeleteTenantUnitAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantUnitId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
}
