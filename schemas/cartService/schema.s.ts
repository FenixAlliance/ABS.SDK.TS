/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/CartService/Carts/{cartId}": {
    /**
     * Get all business owned contacts
     * @description Get all business owned contacts
     */
    get: operations["GetCartByIdAsync"];
    /**
     * Update a cart
     * @description Update a cart
     */
    put: operations["UpdateCartAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Currency": {
    /**
     * Get the currency of a cart
     * @description The currency of a cart used for display purposes
     */
    get: operations["GetCartCurrencyAsync"];
    /**
     * Set the currency of a cart
     * @description Set the currency of a cart
     */
    put: operations["SetCartCurrencyAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Country": {
    /**
     * Get the country of a cart
     * @description The country of a cart is used to calculate taxes and shipping costs
     */
    get: operations["GetCartCountryAsync"];
    /**
     * Set the country of a cart
     * @description Set the country of a cart
     */
    put: operations["SetCartCountryAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Submit": {
    /**
     * Submit a cart for processing
     * @description Submit a cart for processing
     */
    post: operations["SubmitCartAsync"];
  };
  "/api/v2/CartService/Carts/ActingCart": {
    /**
     * Get the acting cart
     * @description Get the acting cart
     */
    get: operations["GetActingCart"];
  };
  "/api/v2/CartService/Carts/GuestCart": {
    /**
     * Get the guest cart
     * @description Get the guest cart
     */
    get: operations["GetGuestCartAsync"];
  };
  "/api/v2/CartService/Carts/UserCart": {
    /**
     * Get the current user's cart
     * @description Get the current user's cart
     */
    get: operations["GetUserCart"];
  };
  "/api/v2/CartService/Carts/BusinessCart/{tenantId}": {
    /**
     * Get the business cart
     * @description Get the business cart
     */
    get: operations["GetTenantCartAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Items": {
    /**
     * Get all cart lines
     * @description Get all cart lines
     */
    get: operations["GetItemsInCartAsync"];
    /**
     * Clear all items from a cart
     * @description Clear all items from a cart
     */
    delete: operations["ClearCartAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Items/{itemId}": {
    /**
     * Update an Item in a cart
     * @description Update an Item in a cart
     */
    put: operations["UpdateItemCartRecordAsync"];
    /**
     * Add an Item to a cart
     * @description Add an Item to a cart
     */
    post: operations["AddItemToCartAsync"];
    /**
     * Remove an Item from a cart
     * @description Remove an Item from a cart
     */
    delete: operations["RemoveItemFromCartAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Contains/{itemId}": {
    /**
     * Assesses if an Item is already in a cart
     * @description Assesses if an Item is already in a cart
     */
    get: operations["IsItemAlreadyInCartAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Items/{itemId}/Increase": {
    /**
     * Increase an Item in a cart
     * @description Increase an Item in a cart
     */
    put: operations["IncreaseItemCartRecordQuantityAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Items/{itemId}/Decrease": {
    /**
     * Decrease an Item in a cart
     * @description Decrease an Item in a cart
     */
    put: operations["RemoveItemFromCartAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Lines": {
    /**
     * Get all cart lines
     * @description Get all cart lines
     */
    get: operations["GetCartLinesAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Lines/{lineId}": {
    /**
     * Get a cart line by ID
     * @description Get a cart line by ID
     */
    get: operations["GetCartLineAsync"];
    /**
     * Update a cart line
     * @description Update a cart line
     */
    put: operations["UpdateCartLineAsync"];
    /**
     * Remove a cart line
     * @description Remove a cart line
     */
    delete: operations["RemoveCartLineAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Lines/{lineId}/Increase": {
    /**
     * Increase the quantity of a cart line
     * @description Increase the quantity of a cart line
     */
    put: operations["IncreaseCartLineAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Lines/{lineId}/Decrease": {
    /**
     * Decrease the quantity of a cart line
     * @description Decrease the quantity of a cart line
     */
    put: operations["DecreaseCartLineAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/WishLists": {
    /**
     * Get all wishlists in a cart
     * @description Get all wishlists in a cart
     */
    get: operations["GetWishListAsync"];
    /**
     * Create a new wish list
     * @description Create a new wish list
     */
    post: operations["CreateWishListAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/WishLists/Contains/{itemId}": {
    /**
     * Assesses if an Item is already in any of the cart's wishlists
     * @description Assesses if an Item is already in any of the cart's wishlists
     */
    get: operations["IsItemInWishLists"];
  };
  "/api/v2/CartService/Carts/{cartId}/WishLists/{wishListId}/Exists": {
    /**
     * Assesses if a WishList exists
     * @description Assesses if a WishList exists
     */
    get: operations["WishListExistsAsync"];
    /**
     * Assesses if a WishList exists
     * @description Assesses if a WishList exists but does not return the content
     */
    head: operations["WishListExistsHeadAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/WishLists/{wishListId}": {
    /**
     * Get a wish list by ID
     * @description Get a wish list by ID
     */
    get: operations["GetCartWishListDetailsAsync"];
    /**
     * Update a wish list
     * @description Update a wish list
     */
    put: operations["UpdateItemToWishList"];
    /**
     * Delete a wish list
     * @description Delete a wish list
     */
    delete: operations["DeleteWishList"];
  };
  "/api/v2/CartService/Carts/{cartId}/WishLists/{wishListId}/Records": {
    /**
     * Get all records in a wish list
     * @description Get all records in a wish list
     */
    get: operations["GetCartWishListItemsAsync"];
    /**
     * Add a record to a wish list
     * @description Add a record to a wish list
     */
    post: operations["AddItemToWishList"];
  };
  "/api/v2/CartService/Carts/{cartId}/WishLists/{wishListId}/Records/{recordId}": {
    /**
     * Get a record in a wish list
     * @description Get a record in a wish list
     */
    get: operations["GetCartWishListItemAsync"];
    /**
     * Remove a record from a wish list
     * @description Remove a record from a wish list
     */
    delete: operations["DeleteWishListRecord"];
  };
  "/api/v2/CartService/Carts/{cartId}/Compare": {
    /**
     * Get all items in the compare table
     * @description Get all items in the compare table
     */
    get: operations["GetItemToCompareRecords"];
  };
  "/api/v2/CartService/Carts/{cartId}/Compare/{itemId}": {
    /**
     * Get an item from the compare table
     * @description Get an item from the compare table
     */
    get: operations["GetItemToCompareRecord"];
    /**
     * Add an item to the compare table
     * @description Add an item to the compare table
     */
    post: operations["AddItemToCompareTableAsync"];
    /**
     * Remove an item from the compare table
     * @description Remove an item from the compare table
     */
    delete: operations["RemoveItemFromCompareTableAsync"];
  };
  "/api/v2/CartService/Carts/{cartId}/Compare/Contains/{itemId}": {
    /**
     * Assesses if an Item is already in the compare table
     * @description Assesses if an Item is already in the compare table
     */
    get: operations["IsItemInCompareTableAsync"];
  };
  "/api/v2/CartService/Compare/{cartId}": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          cartId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ItemToCompareCartRecordDtoListEnvelope"];
            "application/xml": components["schemas"]["ItemToCompareCartRecordDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Compare/{recordId}/Details": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ItemToCompareCartRecordDtoEnvelope"];
            "application/xml": components["schemas"]["ItemToCompareCartRecordDtoEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Compare": {
    post: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["AddProductToCompareRequest"];
          "application/xml": components["schemas"]["AddProductToCompareRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ItemCartRecordDto"];
            "application/xml": components["schemas"]["ItemCartRecordDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Compare/{recordId}": {
    delete: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ItemToCompareCartRecordDto"];
            "application/xml": components["schemas"]["ItemToCompareCartRecordDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/AddItem": {
    post: {
      parameters: {
        query?: {
          cartId?: string;
          itemId?: string;
          quantity?: number;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/{cartID}": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          cartId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ItemCartRecordDtoListEnvelope"];
            "application/xml": components["schemas"]["ItemCartRecordDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records": {
    post: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ItemCartRecordCreateDto"];
          "application/xml": components["schemas"]["ItemCartRecordCreateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          cartId?: string;
          productId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/IsInCart": {
    get: {
      parameters: {
        query: {
          itemID: string;
          cartID: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BooleanEnvelope"];
            "application/xml": components["schemas"]["BooleanEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/ClearCart": {
    post: {
      parameters: {
        query: {
          cartID: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/{recordId}/Details": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ItemCartRecordDtoEnvelope"];
            "application/xml": components["schemas"]["ItemCartRecordDtoEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/{recordId}": {
    put: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ItemCartRecordUpdateDto"];
          "application/xml": components["schemas"]["ItemCartRecordUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/{recordId}/Increase": {
    put: {
      parameters: {
        query?: {
          quantity?: number;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/Records/{recordId}/Decrease": {
    put: {
      parameters: {
        query?: {
          quantity?: number;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/Contains": {
    get: {
      parameters: {
        query?: {
          cartId?: string;
          productId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BooleanEnvelope"];
            "application/xml": components["schemas"]["BooleanEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/Exists": {
    get: {
      parameters: {
        query?: {
          wishListId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BooleanEnvelope"];
            "application/xml": components["schemas"]["BooleanEnvelope"];
          };
        };
      };
    };
    head: {
      parameters: {
        query?: {
          wishListId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists": {
    post: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewWishListRequest"];
          "application/xml": components["schemas"]["NewWishListRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/{wishListId}": {
    put: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          wishListId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WishListUpdateDto"];
          "application/xml": components["schemas"]["WishListUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          wishListId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/{cartId}": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          cartId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["WishListDto"][];
            "application/xml": components["schemas"]["WishListDto"][];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/{wishListId}/Records": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          wishListId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["WishListItemRecordDto"][];
            "application/xml": components["schemas"]["WishListItemRecordDto"][];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/{wishListId}/Details": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          wishListId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["WishListDto"];
            "application/xml": components["schemas"]["WishListDto"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/Records": {
    post: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProductToWishListRequest"];
          "application/xml": components["schemas"]["ProductToWishListRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CartService/WishLists/Records/{recordId}": {
    delete: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          recordId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AddProductToCompareRequest: {
      id?: string | null;
      cartID?: string | null;
      productID?: string | null;
    };
    BooleanEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: boolean;
    };
    CartDto: {
      id?: string | null;
      ip?: string | null;
      type?: string | null;
      /** Format: double */
      total?: number;
      /** Format: double */
      taxes?: number;
      /** Format: double */
      freight?: number;
      /** Format: double */
      subTotal?: number;
      currencyId?: string | null;
      countryId?: string | null;
      /** Format: int32 */
      itemCartRecordsCount?: number | null;
      /** Format: int32 */
      itemToCompareRecordsCount?: number | null;
    };
    CartDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["CartDto"];
    };
    CartUpdateRequest: {
      currencyId?: string | null;
      countryId?: string | null;
    };
    CountryDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      iso3?: string | null;
      iso2?: string | null;
      name?: string | null;
      nativeName?: string | null;
      flagUrl?: string | null;
    };
    CountryDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["CountryDto"];
    };
    CountrySwitchRequest: {
      cartID?: string | null;
      countryID?: string | null;
    };
    CurrencyDto: {
      id?: string | null;
      code?: string | null;
      name?: string | null;
      symbol?: string | null;
      country?: components["schemas"]["CountryDto"];
    };
    CurrencyDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["CurrencyDto"];
    };
    CurrencySwitchRequest: {
      cartID?: string | null;
      currencyID?: string | null;
    };
    EmptyEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ErrorEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ItemCartRecordCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      cartId?: string | null;
      productId?: string | null;
      /** Format: double */
      quantity?: number;
    };
    ItemCartRecordDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      closed?: boolean;
      itemId?: string | null;
      itemTitle?: string | null;
      itemShortDescription?: string | null;
      itemPrimaryImageUrl?: string | null;
      shippingPolicyId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
      currencyId?: string | null;
      description?: string | null;
      /** Format: double */
      quantity?: number;
      free?: boolean;
      freeReason?: string | null;
      freeReasonCode?: string | null;
      data?: string | null;
      dataLabel?: string | null;
      data1?: string | null;
      data1Label?: string | null;
      data2?: string | null;
      data2Label?: string | null;
      data3?: string | null;
      data3Label?: string | null;
      data4?: string | null;
      data4Label?: string | null;
      data5?: string | null;
      data5Label?: string | null;
      data6?: string | null;
      data6Label?: string | null;
      data7?: string | null;
      data7Label?: string | null;
      data8?: string | null;
      data8Label?: string | null;
      data9?: string | null;
      data9Label?: string | null;
      itemPriceId?: string | null;
      priceListItemId?: string | null;
      unitId?: string | null;
      unitGroupId?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      taxCalculationMethod?: 0 | 1;
      /**
       * Format: int32
       * @enum {integer}
       */
      costCalculationMethod?: 0 | 1;
      forexRatesSnapshot?: string | null;
      /** Format: double */
      forexRate?: number;
      /** Format: double */
      totalBaseAmountInUsd?: number;
      /** Format: double */
      totalProfitInUsd?: number;
      /** Format: double */
      totalDetailAmountInUsd?: number;
      /** Format: double */
      totalTaxBaseInUsd?: number;
      /** Format: double */
      totalDiscountsInUsd?: number;
      /** Format: double */
      totalTaxesInUsd?: number;
      /** Format: double */
      totalWithholdingTaxesInUsd?: number;
      /** Format: double */
      totalShippingCostInUsd?: number;
      /** Format: double */
      totalShippingTaxesInUsd?: number;
      /** Format: double */
      totalWarrantyCostInUsd?: number;
      /** Format: double */
      totalReturnCostInUsd?: number;
      /** Format: double */
      totalRefundCostInUsd?: number;
      /** Format: double */
      totalSurchargesInUsd?: number;
      /** Format: double */
      totalAmountInUsd?: number;
      /** Format: double */
      totalGlobalDiscountsInUsd?: number;
      /** Format: double */
      totalGlobalSurchargesInUsd?: number;
      /** Format: double */
      customGlobalSurchargesAmount?: number;
      /** Format: double */
      customGlobalDiscountsAmount?: number;
      /** Format: double */
      customBaseAmount?: number;
      /** Format: double */
      customDetailAmount?: number;
      /** Format: double */
      customDiscountsAmount?: number;
      /** Format: double */
      customTaxBase?: number;
      /** Format: double */
      customSurchargesAmount?: number;
      /** Format: double */
      customProfitAmount?: number;
      /** Format: double */
      customShippingCostAmount?: number;
      /** Format: double */
      customShippingTaxAmount?: number;
      /** Format: double */
      customTaxAmount?: number;
      /** Format: double */
      customWithholdingTaxAmount?: number;
      /** Format: double */
      customTotalAmount?: number;
      returnPolicyId?: string | null;
      refundPolicyId?: string | null;
      warrantyPolicyId?: string | null;
      shipmentPolicyId?: string | null;
      shippingLocationId?: string | null;
      locationId?: string | null;
      quoteItemRecordId?: string | null;
      businessProfileRecordId?: string | null;
      parentBillingItemRecordId?: string | null;
      cartId?: string | null;
      itemID?: string | null;
      shippingAddressID?: string | null;
    };
    ItemCartRecordDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ItemCartRecordDto"];
    };
    ItemCartRecordDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ItemCartRecordDto"][] | null;
    };
    ItemCartRecordUpdateDto: {
      /** Format: double */
      quantity?: number;
    };
    ItemToCompareCartRecordDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      cartId?: string | null;
      itemId?: string | null;
      itemTitle?: string | null;
      itemShortDescription?: string | null;
      itemPrimaryImageUrl?: string | null;
      brandId?: string | null;
      brandName?: string | null;
      categoryName?: string | null;
      categoryId?: string | null;
      googleCategoryId?: string | null;
      googleCategoryName?: string | null;
      /** Format: double */
      totalTaxesInUsd?: number;
      /** Format: double */
      totalPriceInUsd?: number;
      shippingCountryId?: string | null;
      tenantId?: string | null;
    };
    ItemToCompareCartRecordDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ItemToCompareCartRecordDto"];
    };
    ItemToCompareCartRecordDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ItemToCompareCartRecordDto"][] | null;
    };
    NewWishListRequest: {
      title?: string | null;
      description?: string | null;
      /** Format: uuid */
      cartID?: string;
      public?: boolean;
    };
    ProductToWishListRequest: {
      wishListId?: string | null;
      productId?: string | null;
    };
    WishListDto: {
      /** Format: date-time */
      timestamp?: string | null;
      id?: string | null;
      title?: string | null;
      description?: string | null;
      cartId?: string | null;
      public?: boolean;
    };
    WishListDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["WishListDto"];
    };
    WishListItemRecordDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      wishListId?: string | null;
      productId?: string | null;
    };
    WishListUpdateDto: {
      title: string;
      description?: string | null;
      public?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all business owned contacts
   * @description Get all business owned contacts
   */
  GetCartByIdAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a cart
   * @description Update a cart
   */
  UpdateCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CartUpdateRequest"];
        "application/xml": components["schemas"]["CartUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the currency of a cart
   * @description The currency of a cart used for display purposes
   */
  GetCartCurrencyAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CurrencyDtoEnvelope"];
          "application/xml": components["schemas"]["CurrencyDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Set the currency of a cart
   * @description Set the currency of a cart
   */
  SetCartCurrencyAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CurrencySwitchRequest"];
        "application/xml": components["schemas"]["CurrencySwitchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the country of a cart
   * @description The country of a cart is used to calculate taxes and shipping costs
   */
  GetCartCountryAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CountryDtoEnvelope"];
          "application/xml": components["schemas"]["CountryDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Set the country of a cart
   * @description Set the country of a cart
   */
  SetCartCountryAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CountrySwitchRequest"];
        "application/xml": components["schemas"]["CountrySwitchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Submit a cart for processing
   * @description Submit a cart for processing
   */
  SubmitCartAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the acting cart
   * @description Get the acting cart
   */
  GetActingCart: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the guest cart
   * @description Get the guest cart
   */
  GetGuestCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the current user's cart
   * @description Get the current user's cart
   */
  GetUserCart: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get the business cart
   * @description Get the business cart
   */
  GetTenantCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all cart lines
   * @description Get all cart lines
   */
  GetItemsInCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemCartRecordDtoListEnvelope"];
          "application/xml": components["schemas"]["ItemCartRecordDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Clear all items from a cart
   * @description Clear all items from a cart
   */
  ClearCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update an Item in a cart
   * @description Update an Item in a cart
   */
  UpdateItemCartRecordAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemCartRecordUpdateDto"];
        "application/xml": components["schemas"]["ItemCartRecordUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Add an Item to a cart
   * @description Add an Item to a cart
   */
  AddItemToCartAsync: {
    parameters: {
      query?: {
        quantity?: number;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Decrease an Item in a cart
   * @description Decrease an Item in a cart
   */
  RemoveItemFromCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemCartRecordUpdateDto"];
        "application/xml": components["schemas"]["ItemCartRecordUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Assesses if an Item is already in a cart
   * @description Assesses if an Item is already in a cart
   */
  IsItemAlreadyInCartAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
    };
  };
  /**
   * Increase an Item in a cart
   * @description Increase an Item in a cart
   */
  IncreaseItemCartRecordQuantityAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemCartRecordUpdateDto"];
        "application/xml": components["schemas"]["ItemCartRecordUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all cart lines
   * @description Get all cart lines
   */
  GetCartLinesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemCartRecordDtoListEnvelope"];
          "application/xml": components["schemas"]["ItemCartRecordDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a cart line by ID
   * @description Get a cart line by ID
   */
  GetCartLineAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        lineId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ItemCartRecordDtoEnvelope"];
          "application/xml": components["schemas"]["ItemCartRecordDtoEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a cart line
   * @description Update a cart line
   */
  UpdateCartLineAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        lineId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemCartRecordUpdateDto"];
        "application/xml": components["schemas"]["ItemCartRecordUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Remove a cart line
   * @description Remove a cart line
   */
  RemoveCartLineAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        lineId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Increase the quantity of a cart line
   * @description Increase the quantity of a cart line
   */
  IncreaseCartLineAsync: {
    parameters: {
      query?: {
        quantity?: number;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        lineId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Decrease the quantity of a cart line
   * @description Decrease the quantity of a cart line
   */
  DecreaseCartLineAsync: {
    parameters: {
      query?: {
        quantity?: number;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        lineId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all wishlists in a cart
   * @description Get all wishlists in a cart
   */
  GetWishListAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WishListDto"][];
          "application/xml": components["schemas"]["WishListDto"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new wish list
   * @description Create a new wish list
   */
  CreateWishListAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NewWishListRequest"];
        "application/xml": components["schemas"]["NewWishListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Assesses if an Item is already in any of the cart's wishlists
   * @description Assesses if an Item is already in any of the cart's wishlists
   */
  IsItemInWishLists: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Assesses if a WishList exists
   * @description Assesses if a WishList exists
   */
  WishListExistsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Assesses if a WishList exists
   * @description Assesses if a WishList exists but does not return the content
   */
  WishListExistsHeadAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a wish list by ID
   * @description Get a wish list by ID
   */
  GetCartWishListDetailsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WishListDtoEnvelope"];
          "application/xml": components["schemas"]["WishListDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a wish list
   * @description Update a wish list
   */
  UpdateItemToWishList: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["WishListUpdateDto"];
        "application/xml": components["schemas"]["WishListUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a wish list
   * @description Delete a wish list
   */
  DeleteWishList: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all records in a wish list
   * @description Get all records in a wish list
   */
  GetCartWishListItemsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WishListItemRecordDto"][];
          "application/xml": components["schemas"]["WishListItemRecordDto"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Add a record to a wish list
   * @description Add a record to a wish list
   */
  AddItemToWishList: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProductToWishListRequest"];
        "application/xml": components["schemas"]["ProductToWishListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a record in a wish list
   * @description Get a record in a wish list
   */
  GetCartWishListItemAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
        recordId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WishListItemRecordDto"][];
          "application/xml": components["schemas"]["WishListItemRecordDto"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Remove a record from a wish list
   * @description Remove a record from a wish list
   */
  DeleteWishListRecord: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        wishListId: string;
        recordId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all items in the compare table
   * @description Get all items in the compare table
   */
  GetItemToCompareRecords: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemToCompareCartRecordDtoListEnvelope"];
          "application/xml": components["schemas"]["ItemToCompareCartRecordDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get an item from the compare table
   * @description Get an item from the compare table
   */
  GetItemToCompareRecord: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemToCompareCartRecordDtoEnvelope"];
          "application/xml": components["schemas"]["ItemToCompareCartRecordDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Add an item to the compare table
   * @description Add an item to the compare table
   */
  AddItemToCompareTableAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemCartRecordDto"];
          "application/xml": components["schemas"]["ItemCartRecordDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Remove an item from the compare table
   * @description Remove an item from the compare table
   */
  RemoveItemFromCompareTableAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemToCompareCartRecordDto"];
          "application/xml": components["schemas"]["ItemToCompareCartRecordDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Assesses if an Item is already in the compare table
   * @description Assesses if an Item is already in the compare table
   */
  IsItemInCompareTableAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
}
