/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/TimeTrackerService/ProjectTimeLogs": {
    get: {
      parameters: {
        query: {
          tenantId: string;
          projectPeriodId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
            "application/xml": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectTimeLogCreateDto"];
          "application/xml": components["schemas"]["ProjectTimeLogCreateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/ProjectTimeLogs/ByResponsibleContact": {
    get: {
      parameters: {
        query: {
          contactId: string;
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
            "application/xml": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/ProjectTimeLogs/CreatedByContact": {
    get: {
      parameters: {
        query: {
          contactId: string;
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
            "application/xml": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/ProjectTimeLogs/ForProject/{projectId}": {
    get: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
            "application/xml": components["schemas"]["ProjectTimeLogDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/ProjectTimeLogs/{timeLogId}": {
    get: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          timeLogId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectTimeLogDtoEnvelope"];
            "application/xml": components["schemas"]["ProjectTimeLogDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    put: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          timeLogId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectTimeLogUpdateDto"];
          "application/xml": components["schemas"]["ProjectTimeLogUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          timeLogId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/TimeLogApprovals": {
    post: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectHoursApprovalCreateDto"];
          "application/xml": components["schemas"]["ProjectHoursApprovalCreateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/TimeLogApprovals/{approvalId}/Status": {
    put: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          approvalId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectHoursApprovalStatusUpdateDto"];
          "application/xml": components["schemas"]["ProjectHoursApprovalStatusUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/TimeTrackerService/TimeLogApprovals/{approvalId}/Approver": {
    put: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          approvalId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProjectHoursApprovalApproverUpdateDto"];
          "application/xml": components["schemas"]["ProjectHoursApprovalApproverUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ErrorEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ProjectHoursApprovalApproverUpdateDto: {
      approverContactID?: string | null;
    };
    ProjectHoursApprovalCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      requesterContactID?: string | null;
      approverContactID?: string | null;
      projectPeriodID?: string | null;
      comments?: string | null;
    };
    ProjectHoursApprovalStatusUpdateDto: {
      /**
       * Format: int32
       * @enum {integer}
       */
      approvalStatus?: 0 | 1 | 2;
      comments?: string | null;
    };
    ProjectTimeLogCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      /** @example PT2H30M */
      timeSpan?: string;
      /** Format: date-time */
      logDate?: string;
      comments?: string | null;
      projectTaskID: string;
      projectPeriodID: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      projectTimeLogRecordType?: 0 | 1 | 2;
      projectID?: string | null;
    };
    ProjectTimeLogDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      projectId?: string | null;
      projectTaskId?: string | null;
      taskCategoryId?: string | null;
      projectPeriodId?: string | null;
      responsibleContactId?: string | null;
      creatorContactId?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      recordType?: 0 | 1 | 2;
      /** Format: date-time */
      timeStamp?: string;
      /** @example PT2H30M */
      timeSpan?: string;
      /** Format: date-time */
      logDate?: string;
      comments?: string | null;
      type?: string | null;
    };
    ProjectTimeLogDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ProjectTimeLogDto"];
    };
    ProjectTimeLogDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ProjectTimeLogDto"][] | null;
    };
    ProjectTimeLogUpdateDto: {
      /** Format: date-time */
      logDate?: string;
      /** @example PT2H30M */
      timeSpan?: string;
      comments?: string | null;
      projectTaskID?: string | null;
      projectPeriodID?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      projectTimeLogRecordType?: 0 | 1 | 2;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
