/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/CrmService/Contacts": {
    /**
     * Get all business owned contacts
     * @description Get all business owned contacts
     */
    get: operations["GetContactsAsync"];
    /**
     * Create a new contact
     * @description Create a new contact
     */
    post: operations["CreateContactAsync"];
  };
  "/api/v2/CrmService/Contacts/Count": {
    /**
     * Get all business owned contacts count
     * @description Get all business owned contacts count
     */
    get: operations["GetContactsCountAsync"];
  };
  "/api/v2/CrmService/Contacts/Extended": {
    /**
     * Get all business owned contacts
     * @description Get all business owned contacts
     */
    get: operations["GetExtendedContactsAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}": {
    /**
     * Get a contact by ID
     * @description Get a contact by ID
     */
    get: operations["GetContactAsync"];
    /**
     * Update a contact
     * @description Update a contact
     */
    put: operations["UpdateContactAsync"];
    /**
     * Delete a contact
     * @description Delete a contact
     */
    delete: operations["DeleteContactAsync"];
    /**
     * Patch a contact
     * @description Patch a contact
     */
    patch: operations["PatchContactAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}/Extended": {
    /**
     * Get a contact by ID
     * @description Get a contact by ID
     */
    get: operations["GetExtendedContactAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals": {
    /**
     * Get all contacts of type individual
     * @description Get all contacts of type individual
     */
    get: operations["GetBusinessOwnedIndividualsAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals/Count": {
    /**
     * Get all contacts of type individual count
     * @description Get all contacts of type individual count
     */
    get: operations["GetBusinessOwnedIndividualsCountAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals/Extended": {
    /**
     * Get all contacts of type individual
     * @description Get all contacts of type individual
     */
    get: operations["GetExtendedBusinessOwnedIndividualsAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals/{contactId}": {
    /**
     * Get a Contact of type Individual by ID
     * @description Get a Contact of type Individual by ID
     */
    get: operations["GetBusinessOwnedIndividualAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations": {
    /**
     * Get all contacts of type organization
     * @description Get all contacts of type organization
     */
    get: operations["GetBusinessOwnedOrganizationsAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations/Count": {
    /**
     * Get all contacts of type organization count
     * @description Get all contacts of type organization count
     */
    get: operations["GetBusinessOwnedOrganizationsCountAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations/Extended": {
    /**
     * Get all contacts of type organization
     * @description Get all contacts of type organization
     */
    get: operations["GetExtendedBusinessOwnedOrganizationsAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations/{contactId}": {
    /**
     * Get a Contact of type Organization by ID
     * @description Get a Contact of type Organization by ID
     */
    get: operations["GetBusinessOwnedOrganizationAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}/Cart": {
    /**
     * Get a contact's cart
     * @description Get a contact's cart
     */
    get: operations["GetContactCartAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}/Avatar": {
    /**
     * Get a contact's avatar
     * @description Get a contact's avatar
     */
    get: operations["GetContactAvatarAsync"];
    /**
     * Update a contact's avatar
     * @description Update a contact's avatar
     */
    post: operations["UpdateContactAvatarAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}/Wallet": {
    /**
     * Get a contact's wallet
     * @description Get a contact's wallet
     */
    get: operations["GetContactWalletAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}/Profiles": {
    /**
     * Get a contact's social profiles
     * @description Get a contact's social profiles
     */
    get: operations["GetContactProfilesAsync"];
  };
  "/api/v2/CrmService/Contacts/{contactId}/SocialProfile": {
    /**
     * Get a contact's social profile
     * @description Get a contact's social profile
     */
    get: operations["GetContactSocialProfileAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals/{contactId}/Organizations": {
    /**
     * Get individual related organizations
     * @description Get individual related organizations
     */
    get: operations["GetIndividualRelatedOrganizationsAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals/{contactId}/Individuals": {
    /**
     * Get individual related individuals
     * @description Get individual related individuals
     */
    get: operations["GetIndividualRelatedIndividualsAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations/{contactId}/Individuals": {
    /**
     * Get organization related individuals
     * @description Get organization related individuals
     */
    get: operations["GetOrganizationRelatedIndividualsAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations/{contactId}/Organizations": {
    /**
     * Get organization related organizations
     * @description Get organization related organizations
     */
    get: operations["GetOrganizationRelatedOrganizationsAsync"];
  };
  "/api/v2/CrmService/Contacts/Organizations/Upsert": {
    /**
     * Upsert a tenant onto another tenant's contact list
     * @description Upsert a tenant onto another tenant's contact list
     */
    post: operations["UpsertTenantOntoAnotherTenantContactListAsync"];
  };
  "/api/v2/CrmService/Contacts/Individuals/Upsert": {
    /**
     * Upsert a user onto a tenant's contact list
     * @description Upsert a user onto a tenant's contact list
     */
    post: operations["UpsertUserOntoAnotherTenantContactListAsync"];
  };
  "/api/v2/CrmService/Sync": {
    post: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ContactDtoListEnvelope"];
            "application/xml": components["schemas"]["ContactDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CrmService/Sync/Me": {
    post: {
      parameters: {
        query: {
          tenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ContactDtoListEnvelope"];
            "application/xml": components["schemas"]["ContactDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CrmService/Sync/User": {
    post: {
      parameters: {
        query: {
          tenantId: string;
          relatedUserId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ContactDtoListEnvelope"];
            "application/xml": components["schemas"]["ContactDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/CrmService/Sync/Tenant": {
    post: {
      parameters: {
        query: {
          tenantId: string;
          relatedTenantId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CartDto: {
      id?: string | null;
      ip?: string | null;
      type?: string | null;
      /** Format: double */
      total?: number;
      /** Format: double */
      taxes?: number;
      /** Format: double */
      freight?: number;
      /** Format: double */
      subTotal?: number;
      currencyId?: string | null;
      countryId?: string | null;
      /** Format: int32 */
      itemCartRecordsCount?: number | null;
      /** Format: int32 */
      itemToCompareRecordsCount?: number | null;
    };
    CartDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["CartDto"];
    };
    ContactCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      tenantId: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 0 | 1;
      firstName: string;
      lastName?: string | null;
      /** Format: email */
      email: string;
      taxId?: string | null;
      primaryContactId?: string | null;
      qualifiedName?: string | null;
      about?: string | null;
      countryId?: string | null;
      stateId?: string | null;
      cityId?: string | null;
      /** Format: tel */
      mobilePhone?: string | null;
      /** Format: tel */
      businessPhone?: string | null;
      postalCode?: string | null;
      duns?: string | null;
      jobTitle?: string | null;
      webUrl?: string | null;
      currencyId?: string | null;
      languageId?: string | null;
      timezoneId?: string | null;
      /** Format: date-time */
      birthday?: string | null;
      streetLine1?: string | null;
      streetLine2?: string | null;
      gitHubUrl?: string | null;
      twitchUrl?: string | null;
      redditUrl?: string | null;
      tikTokUrl?: string | null;
      websiteUrl?: string | null;
      twitterUrl?: string | null;
      facebookUrl?: string | null;
      youTubeUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      githubUsername?: string | null;
      instagramUsername?: unknown;
      tikTokUsername?: unknown;
      stackExchangeUrl?: unknown;
      stackOverflowUrl?: unknown;
      parentContactId?: unknown;
    };
    ContactDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      qualifiedName?: string | null;
      tenantId?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      type?: 0 | 1;
      publicName?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      jobTitle?: string | null;
      coverUrl?: string | null;
      avatarUrl?: string | null;
      countryId?: string | null;
      timezoneId?: string | null;
      languageId?: string | null;
      socialProfileId?: string | null;
      webUrl?: string | null;
      gitHubUrl?: string | null;
      twitchUrl?: string | null;
      redditUrl?: string | null;
      tikTokUrl?: string | null;
      websiteUrl?: string | null;
      twitterUrl?: string | null;
      facebookUrl?: string | null;
      youTubeUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      githubUsername?: string | null;
      duns?: string | null;
      taxId?: string | null;
      /** Format: email */
      email?: string | null;
      about?: string | null;
      street?: string | null;
      cartId?: string | null;
      cityId?: string | null;
      zipCode?: string | null;
      stateId?: string | null;
      walletId?: string | null;
      faxNumber?: string | null;
      postalCode?: string | null;
      currencyId?: string | null;
      streetLine1?: string | null;
      streetLine2?: string | null;
      territoryId?: string | null;
      mobilePhone?: string | null;
      enrollmentId?: string | null;
      annualRevenue?: string | null;
      relatedUserId?: string | null;
      businessPhone?: string | null;
      ownerContactId?: string | null;
      relatedTenantId?: string | null;
      activityFeedId?: string | null;
      parentContactId?: string | null;
      identityProvider?: string | null;
      partnerProfileId?: string | null;
      primaryContactId?: string | null;
      activeDirectoryId?: string | null;
      identityProviderAccessToken?: string | null;
      /** Format: date-time */
      birthday?: string | null;
    };
    ContactDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ContactDto"];
    };
    ContactDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ContactDto"][] | null;
    };
    ContactProfileDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string;
      tenantId?: string | null;
      contactId?: string | null;
      enrollmentId?: string | null;
      about?: string | null;
      verified?: boolean;
      submitted?: boolean;
      avatarUrl?: string | null;
      qualifiedName?: string | null;
      /** Format: date-time */
      verificationTimestamp?: string | null;
      data?: string | null;
      dataLabel?: string | null;
      data1?: string | null;
      data1Label?: string | null;
      data2?: string | null;
      data2Label?: string | null;
      data3?: string | null;
      data3Label?: string | null;
      data4?: string | null;
      data4Label?: string | null;
      data5?: string | null;
      data5Label?: string | null;
      data6?: string | null;
      data6Label?: string | null;
      data7?: string | null;
      data7Label?: string | null;
      data8?: string | null;
      data8Label?: string | null;
      data9?: string | null;
      data9Label?: string | null;
    };
    ContactProfileDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ContactProfileDto"][] | null;
    };
    ContactUpdateDto: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 0 | 1;
      /** Format: date-time */
      birthday?: string | null;
      duns?: string | null;
      taxId?: string | null;
      /** Format: email */
      email: string;
      firstName: string;
      lastName?: string | null;
      primaryContactId?: string | null;
      qualifiedName?: string | null;
      about?: string | null;
      /** Format: tel */
      mobilePhone?: string | null;
      /** Format: tel */
      businessPhone?: string | null;
      jobTitle?: string | null;
      countryId?: string | null;
      parentContactId?: string | null;
      stateId?: string | null;
      cityId?: string | null;
      postalCode?: string | null;
      streetLine1?: string | null;
      streetLine2?: string | null;
      currencyId?: string | null;
      languageId?: string | null;
      timezoneId?: string | null;
      coverUrl?: string | null;
      githubUsername?: string | null;
      instagramUsername?: string | null;
      twitchUrl?: string | null;
      redditUrl?: string | null;
      gitHubUrl?: string | null;
      githubUrl?: string | null;
      tikTokUrl?: string | null;
      twitterUrl?: string | null;
      youTubeUrl?: string | null;
      websiteUrl?: string | null;
      facebookUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      tikTokUsername?: string | null;
      stackExchangeUrl?: string | null;
      stackOverflowUrl?: string | null;
    };
    EmptyEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ErrorEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ExtendedContactDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      qualifiedName?: string | null;
      tenantId?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      type?: 0 | 1;
      publicName?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      jobTitle?: string | null;
      coverUrl?: string | null;
      avatarUrl?: string | null;
      countryId?: string | null;
      timezoneId?: string | null;
      languageId?: string | null;
      socialProfileId?: string | null;
      webUrl?: string | null;
      gitHubUrl?: string | null;
      twitchUrl?: string | null;
      redditUrl?: string | null;
      tikTokUrl?: string | null;
      websiteUrl?: string | null;
      twitterUrl?: string | null;
      facebookUrl?: string | null;
      youTubeUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      githubUsername?: string | null;
      duns?: string | null;
      taxId?: string | null;
      /** Format: email */
      email?: string | null;
      about?: string | null;
      street?: string | null;
      cartId?: string | null;
      cityId?: string | null;
      zipCode?: string | null;
      stateId?: string | null;
      walletId?: string | null;
      faxNumber?: string | null;
      postalCode?: string | null;
      currencyId?: string | null;
      streetLine1?: string | null;
      streetLine2?: string | null;
      territoryId?: string | null;
      mobilePhone?: string | null;
      enrollmentId?: string | null;
      annualRevenue?: string | null;
      relatedUserId?: string | null;
      businessPhone?: string | null;
      ownerContactId?: string | null;
      relatedTenantId?: string | null;
      activityFeedId?: string | null;
      parentContactId?: string | null;
      identityProvider?: string | null;
      partnerProfileId?: string | null;
      primaryContactId?: string | null;
      activeDirectoryId?: string | null;
      identityProviderAccessToken?: string | null;
      /** Format: date-time */
      birthday?: string | null;
      cart?: components["schemas"]["CartDto"];
      wallet?: components["schemas"]["WalletDto"];
      socialProfile?: components["schemas"]["SocialProfileDto"];
      parentContact?: components["schemas"]["SimpleContactDto"];
      primaryContact?: components["schemas"]["SimpleContactDto"];
    };
    ExtendedContactDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ExtendedContactDto"];
    };
    ExtendedContactDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ExtendedContactDto"][] | null;
    };
    Operation: {
      /**
       * Format: int32
       * @enum {integer}
       */
      operationType?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
      path?: string | null;
      op?: string | null;
      from?: string | null;
      value?: unknown;
    };
    SimpleContactDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      qualifiedName?: string | null;
      tenantId?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      type?: 0 | 1;
      publicName?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      jobTitle?: string | null;
      coverUrl?: string | null;
      avatarUrl?: string | null;
      countryId?: string | null;
      timezoneId?: string | null;
      languageId?: string | null;
      socialProfileId?: string | null;
      webUrl?: string | null;
      gitHubUrl?: string | null;
      twitchUrl?: string | null;
      redditUrl?: string | null;
      tikTokUrl?: string | null;
      websiteUrl?: string | null;
      twitterUrl?: string | null;
      facebookUrl?: string | null;
      youTubeUrl?: string | null;
      linkedInUrl?: string | null;
      instagramUrl?: string | null;
      githubUsername?: string | null;
    };
    SocialProfileDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      about?: string | null;
      cover?: string | null;
      avatar?: string | null;
      countryId?: string | null;
      countryName?: string | null;
      identityId?: string | null;
      /** Format: int32 */
      followsCount?: number | null;
      /** Format: int32 */
      messagesCount?: number | null;
      /** Format: int32 */
      followersCount?: number | null;
      /** Format: int32 */
      notificationsCount?: number | null;
      /** Format: int32 */
      unreadNotificationsCount?: number | null;
      /** Format: int32 */
      unreadMessagesCount?: number | null;
      /**
       * Format: int32
       * @enum {integer|null}
       */
      type?: 0 | 1 | 2 | null;
      socialFeedId?: string | null;
      twitterUrl?: string | null;
      facebookURL?: string | null;
      linkedInURL?: string | null;
      youtubeURL?: string | null;
      githubURL?: string | null;
      pinterestURL?: string | null;
      dribbleURL?: string | null;
      domain?: string | null;
      notes?: string | null;
    };
    SocialProfileDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialProfileDto"];
    };
    WalletDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string;
      /** Format: double */
      balance?: number;
      /** Format: double */
      cryptoBalance?: number;
      testMode?: boolean;
      verified?: boolean;
      type?: string | null;
      currencyId?: string | null;
      /** Format: double */
      forexRate?: number;
      /** Format: double */
      balanceInUsd?: number;
      /** Format: double */
      mainNetEtherBalance?: number;
      ethereumAddress?: string | null;
      ethereumPublicKey?: string | null;
      ethereumPrivateKey?: string | null;
      /** Format: double */
      rollingReservePercent?: number;
    };
    WalletDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["WalletDto"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all business owned contacts
   * @description Get all business owned contacts
   */
  GetContactsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create a new contact
   * @description Create a new contact
   */
  CreateContactAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactCreateDto"];
        "application/xml": components["schemas"]["ContactCreateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all business owned contacts count
   * @description Get all business owned contacts count
   */
  GetContactsCountAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all business owned contacts
   * @description Get all business owned contacts
   */
  GetExtendedContactsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ExtendedContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact by ID
   * @description Get a contact by ID
   */
  GetContactAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoEnvelope"];
          "application/xml": components["schemas"]["ContactDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a contact
   * @description Update a contact
   */
  UpdateContactAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContactUpdateDto"];
        "application/xml": components["schemas"]["ContactUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete a contact
   * @description Delete a contact
   */
  DeleteContactAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Patch a contact
   * @description Patch a contact
   */
  PatchContactAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operation"][];
        "application/xml": components["schemas"]["Operation"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact by ID
   * @description Get a contact by ID
   */
  GetExtendedContactAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedContactDtoEnvelope"];
          "application/xml": components["schemas"]["ExtendedContactDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all contacts of type individual
   * @description Get all contacts of type individual
   */
  GetBusinessOwnedIndividualsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all contacts of type individual count
   * @description Get all contacts of type individual count
   */
  GetBusinessOwnedIndividualsCountAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all contacts of type individual
   * @description Get all contacts of type individual
   */
  GetExtendedBusinessOwnedIndividualsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ExtendedContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a Contact of type Individual by ID
   * @description Get a Contact of type Individual by ID
   */
  GetBusinessOwnedIndividualAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoEnvelope"];
          "application/xml": components["schemas"]["ContactDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all contacts of type organization
   * @description Get all contacts of type organization
   */
  GetBusinessOwnedOrganizationsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDto"][];
          "application/xml": components["schemas"]["ContactDto"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all contacts of type organization count
   * @description Get all contacts of type organization count
   */
  GetBusinessOwnedOrganizationsCountAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get all contacts of type organization
   * @description Get all contacts of type organization
   */
  GetExtendedBusinessOwnedOrganizationsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ExtendedContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a Contact of type Organization by ID
   * @description Get a Contact of type Organization by ID
   */
  GetBusinessOwnedOrganizationAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoEnvelope"];
          "application/xml": components["schemas"]["ContactDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact's cart
   * @description Get a contact's cart
   */
  GetContactCartAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartDtoEnvelope"];
          "application/xml": components["schemas"]["CartDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact's avatar
   * @description Get a contact's avatar
   */
  GetContactAvatarAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update a contact's avatar
   * @description Update a contact's avatar
   */
  UpdateContactAvatarAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar?: string;
        };
        "application/json": {
          /** Format: binary */
          avatar?: string;
        };
        "application/xml": {
          /** Format: binary */
          avatar?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact's wallet
   * @description Get a contact's wallet
   */
  GetContactWalletAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletDtoEnvelope"];
          "application/xml": components["schemas"]["WalletDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact's social profiles
   * @description Get a contact's social profiles
   */
  GetContactProfilesAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactProfileDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactProfileDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get a contact's social profile
   * @description Get a contact's social profile
   */
  GetContactSocialProfileAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialProfileDtoEnvelope"];
          "application/xml": components["schemas"]["SocialProfileDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get individual related organizations
   * @description Get individual related organizations
   */
  GetIndividualRelatedOrganizationsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get individual related individuals
   * @description Get individual related individuals
   */
  GetIndividualRelatedIndividualsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get organization related individuals
   * @description Get organization related individuals
   */
  GetOrganizationRelatedIndividualsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get organization related organizations
   * @description Get organization related organizations
   */
  GetOrganizationRelatedOrganizationsAsync: {
    parameters: {
      query: {
        tenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoListEnvelope"];
          "application/xml": components["schemas"]["ContactDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Upsert a tenant onto another tenant's contact list
   * @description Upsert a tenant onto another tenant's contact list
   */
  UpsertTenantOntoAnotherTenantContactListAsync: {
    parameters: {
      query: {
        tenantId: string;
        relatedTenantId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoEnvelope"];
          "application/xml": components["schemas"]["ContactDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Upsert a user onto a tenant's contact list
   * @description Upsert a user onto a tenant's contact list
   */
  UpsertUserOntoAnotherTenantContactListAsync: {
    parameters: {
      query: {
        tenantId: string;
        relatedUserId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContactDtoEnvelope"];
          "application/xml": components["schemas"]["ContactDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
}
