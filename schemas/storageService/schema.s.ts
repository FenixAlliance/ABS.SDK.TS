/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/StorageService/Avatars/{socialProfileId}": {
    /** Get the avatar for a given social profile. */
    get: operations["GetAvatar"];
  };
  "/api/v2/StorageService/Avatars/User": {
    /** Get the avatar for the current user. */
    get: operations["GetCurrentUserAvatar"];
    /** Update the avatar for the current user. */
    post: operations["UpdateUserAvatar"];
  };
  "/api/v2/StorageService/Avatars/User/{userId}": {
    /** Get the avatar for a given user. */
    get: operations["GetUserAvatar"];
  };
  "/api/v2/StorageService/Avatars/Tenant/{tenantId}": {
    /** Get the avatar for a given tenant. */
    get: operations["GetTenantAvatar"];
    /** Update the avatar for a given tenant. */
    post: operations["UpdateTenantAvatar"];
  };
  "/api/v2/StorageService/Avatars/Contact/{contactId}": {
    /** Get the avatar for a given contact. */
    get: operations["GetContactAvatar"];
  };
  "/api/v2/StorageService/Avatars/Contacts/{contactId}": {
    /** Update the avatar for a given contact. */
    post: operations["UpdateContactAvatar"];
  };
  "/api/v2/StorageService/Blobs": {
    get: operations["GetBlobsAsync"];
  };
  "/api/v2/StorageService/Blobs/Single": {
    get: operations["GetBlobAsync"];
  };
  "/api/v2/StorageService/Files": {
    get: operations["GetFilesAsync"];
    post: operations["CreateFileAsync"];
  };
  "/api/v2/StorageService/Files/{fileId}": {
    get: operations["GetFileAsync"];
    put: operations["UpdateFileAsync"];
    delete: operations["DeleteFileAsync"];
  };
  "/api/v2/StorageService/Files/{fileId}/Raw": {
    get: operations["DownloadFileAsync"];
  };
  "/api/v2/StorageService/RadzenEditor/Uploads/Single": {
    post: {
      parameters: {
        query?: {
          tenantId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/v2/StorageService/RadzenEditor/Uploads/Image": {
    post: {
      parameters: {
        query?: {
          tenantId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/v2/StorageService/RadzenEditor/Uploads/Multiple": {
    post: {
      parameters: {
        query?: {
          tenantId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            files?: string[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/v2/StorageService/RadzenEditor/Uploads/{id}": {
    post: {
      parameters: {
        query?: {
          tenantId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            files?: string[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/v2/StorageService/RadzenEditor/Uploads/Specific": {
    post: {
      parameters: {
        query?: {
          tenantId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/v2/StorageService/Uploads": {
    post: {
      parameters: {
        query?: {
          tenantId?: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            notes?: string;
            title?: string;
            author?: string;
            isFolder?: boolean;
            fileName?: string;
            abstract?: string;
            keyWords?: string;
            validResponse?: boolean;
            parentFileUploadId?: string;
            filePath?: string;
            /** Format: binary */
            file?: string;
            /** Format: uuid */
            iD?: string;
            /** Format: date-time */
            timestamp?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Blob: {
      /**
       * Format: int32
       * @enum {integer}
       */
      kind?: 0 | 1;
      isFolder?: boolean;
      isFile?: boolean;
      folderPath?: string | null;
      name?: string | null;
      /** Format: int64 */
      size?: number | null;
      md5?: string | null;
      /** Format: date-time */
      createdTime?: string | null;
      /** Format: date-time */
      lastModificationTime?: string | null;
      fullPath?: string | null;
      properties?: {
        [key: string]: unknown;
      } | null;
      metadata?: ({
        [key: string]: string | null;
      }) | null;
      isRootFolder?: boolean;
    };
    BlobEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["Blob"];
    };
    EmptyEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ErrorEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    FileUploadCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      notes?: string | null;
      title?: string | null;
      author?: string | null;
      isFolder?: boolean;
      fileName?: string | null;
      abstract?: string | null;
      keyWords?: string | null;
      validResponse?: boolean;
      parentFileUploadId?: string | null;
      filePath?: string | null;
      /** Format: binary */
      file?: string | null;
    };
    FileUploadDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      notes?: string | null;
      title?: string | null;
      author?: string | null;
      isFolder?: boolean;
      hash?: string | null;
      fileUrl?: string | null;
      filePath?: string | null;
      fileName?: string | null;
      abstract?: string | null;
      keyWords?: string | null;
      metadata?: string | null;
      /** Format: int64 */
      fileLength?: number;
      contentType?: string | null;
      parentFileId?: string | null;
      validResponse?: boolean;
      userId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
      socialProfileId?: string | null;
      folderPath?: string | null;
    };
    FileUploadDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["FileUploadDto"];
    };
    FileUploadUpdateDto: {
      notes?: string | null;
      metadata?: string | null;
      title?: string | null;
      author?: string | null;
      isFolder?: boolean;
      fileName?: string | null;
      abstract?: string | null;
      keyWords?: string | null;
      validResponse?: boolean;
      parentFileUploadID?: string | null;
      filePath?: string | null;
      /** Format: binary */
      file?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get the avatar for a given social profile. */
  GetAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Get the avatar for the current user. */
  GetCurrentUserAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Update the avatar for the current user. */
  UpdateUserAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Get the avatar for a given user. */
  GetUserAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Get the avatar for a given tenant. */
  GetTenantAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Update the avatar for a given tenant. */
  UpdateTenantAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        tenantId: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Get the avatar for a given contact. */
  GetContactAvatar: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /** Update the avatar for a given contact. */
  UpdateContactAvatar: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        contactId: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetBlobsAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        folderPath?: string;
        browseFilter?: string;
        filePrefix?: string;
        recurse?: boolean;
        maxResults?: number;
        includeAttributes?: boolean;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BlobEnvelope"];
          "image/png": components["schemas"]["BlobEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetBlobAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        filePath?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BlobEnvelope"];
          "image/png": components["schemas"]["BlobEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetFilesAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FileUploadDtoEnvelope"];
          "image/png": components["schemas"]["FileUploadDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  CreateFileAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["FileUploadCreateDto"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "image/png": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unprocessable Content */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetFileAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        fileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FileUploadDtoEnvelope"];
          "image/png": components["schemas"]["FileUploadDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  UpdateFileAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        fileId: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["FileUploadUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FileUploadDtoEnvelope"];
          "image/png": components["schemas"]["FileUploadDtoEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unprocessable Content */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  DeleteFileAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        fileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FileUploadDtoEnvelope"];
          "image/png": components["schemas"]["FileUploadDtoEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Unprocessable Content */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  DownloadFileAsync: {
    parameters: {
      query?: {
        tenantId?: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        fileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
          "image/png": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "image/png": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
}
