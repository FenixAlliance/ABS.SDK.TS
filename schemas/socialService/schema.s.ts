/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/SocialService/SocialFeeds": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialFeedDtoListEnvelope"];
            "application/xml": components["schemas"]["SocialFeedDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialFeeds/Count": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Int32Envelope"];
            "application/xml": components["schemas"]["Int32Envelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialFeeds/{socialFeedId}": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialFeedId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialFeedDtoEnvelope"];
            "application/xml": components["schemas"]["SocialFeedDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialFeeds/{socialFeedId}/Posts": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialFeedId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialFeedPostDtoListEnvelope"];
            "application/xml": components["schemas"]["SocialFeedPostDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialFeedId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialFeedPostCreateDto"];
          "application/xml": components["schemas"]["SocialFeedPostCreateDto"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["SocialFeedPostDtoEnvelope"];
            "application/xml": components["schemas"]["SocialFeedPostDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialFeeds/{socialFeedId}/Posts/Count": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialFeedId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Int32Envelope"];
            "application/xml": components["schemas"]["Int32Envelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialFeeds/{socialFeedId}/Posts/{feedPostId}": {
    get: operations["GetFeedPostAsync"];
    put: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialFeedId: string;
          feedPostId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialFeedPostUpdateDto"];
          "application/xml": components["schemas"]["SocialFeedPostUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialFeedPostDtoEnvelope"];
            "application/xml": components["schemas"]["SocialFeedPostDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialFeedId: string;
          feedPostId: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialPostDtoListEnvelope"];
            "application/xml": components["schemas"]["SocialPostDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialPostCreateDto"];
          "application/xml": components["schemas"]["SocialPostCreateDto"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["SocialPostDtoEnvelope"];
            "application/xml": components["schemas"]["SocialPostDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/Count": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Int32Envelope"];
            "application/xml": components["schemas"]["Int32Envelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}": {
    get: operations["GetSocialPostAsync"];
    put: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialPostUpdateDto"];
          "application/xml": components["schemas"]["SocialPostUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Attachments": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialPostAttachmentDtoListEnvelope"];
            "application/xml": components["schemas"]["SocialPostAttachmentDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialPostAttachmentCreateDto"];
          "application/xml": components["schemas"]["SocialPostAttachmentCreateDto"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["SocialPostAttachmentDtoEnvelope"];
            "application/xml": components["schemas"]["SocialPostAttachmentDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Attachments/Count": {
    get: {
      parameters: {
        query?: {
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Int32Envelope"];
            "application/xml": components["schemas"]["Int32Envelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Attachments/{attachmentId}": {
    get: operations["GetSocialPostAttachmentAsync"];
    put: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
          attachmentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialPostAttachmentUpdateDto"];
          "application/xml": components["schemas"]["SocialPostAttachmentUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
          attachmentId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Reactions": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialReactionDtoListEnvelope"];
            "application/xml": components["schemas"]["SocialReactionDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialReactionCreateDto"];
          "application/xml": components["schemas"]["SocialReactionCreateDto"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["SocialReactionDtoEnvelope"];
            "application/xml": components["schemas"]["SocialReactionDtoEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Reactions/Count": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Int32Envelope"];
            "application/xml": components["schemas"]["Int32Envelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Reactions/{reactionId}": {
    get: operations["GetSocialPostReactionAsync"];
    put: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
          reactionId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialReactionUpdateDto"];
          "application/xml": components["schemas"]["SocialReactionUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
          reactionId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Comments": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SocialPostCommentDtoListEnvelope"];
            "application/xml": components["schemas"]["SocialPostCommentDtoListEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialPostCommentCreateDto"];
          "application/xml": components["schemas"]["SocialPostCommentCreateDto"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Comments/Count": {
    get: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Int32Envelope"];
            "application/xml": components["schemas"]["Int32Envelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialPosts/{socialPostId}/Comments/{commentId}": {
    get: operations["GetSocialPostCommentAsync"];
    put: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
          commentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SocialPostCommentUpdateDto"];
          "application/xml": components["schemas"]["SocialPostCommentUpdateDto"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          socialProfileId: string;
          "api-version"?: string;
        };
        header?: {
          "x-api-version"?: string;
        };
        path: {
          socialPostId: string;
          commentId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmptyEnvelope"];
            "application/xml": components["schemas"]["EmptyEnvelope"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
            "application/xml": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/api/v2/SocialService/SocialProfiles": {
    /**
     * Get Social Profiles
     * @description Get a list of social profiles.
     */
    get: operations["GetSocialProfilesAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/Count": {
    /**
     * Count Social Profiles
     * @description Count social profiles.
     */
    get: operations["CountSocialProfilesAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}": {
    /**
     * Get Social Profile
     * @description Get a social profile by ID.
     */
    get: operations["GetSocialProfileAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Followers": {
    /**
     * Get Followers
     * @description Get a list of followers for a social profile.
     */
    get: operations["GetFollowersAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Followers/Count": {
    /**
     * Count Followers
     * @description Count followers for a social profile.
     */
    get: operations["CountFollowersAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Followers/Profiles": {
    /**
     * Get Followers
     * @description Get a list of followers for a social profile.
     */
    get: operations["GetFollowersAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Followers/Profiles/Count": {
    /**
     * Count Followers
     * @description Count followers for a social profile.
     */
    get: operations["CountFollowersAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Follows": {
    /**
     * Get Follows
     * @description Get a list of follows for a social profile.
     */
    get: operations["GetFollowsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Follows/Count": {
    /**
     * Count Follows
     * @description Count follows for a social profile.
     */
    get: operations["CountFollowsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Follows/Profiles": {
    /**
     * Get Follows
     * @description Get a list of follows for a social profile.
     */
    get: operations["GetFollowsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Follows/Profiles/Count": {
    /**
     * Count Follows
     * @description Count follows for a social profile.
     */
    get: operations["CountFollowsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Follows/{followedSocialProfileId}": {
    /**
     * Check if Follow Exists
     * @description Check if a follow record exists between two social profiles.
     */
    get: operations["FollowExistsAsync"];
    /**
     * Follow
     * @description Follow a social profile.
     */
    post: operations["FollowAsync"];
    /**
     * Unfollow
     * @description Unfollow a social profile.
     */
    delete: operations["UnfollowAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Notifications": {
    /**
     * Get Notifications
     * @description Get a list of notifications for a social profile.
     */
    get: operations["GetNotificationsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Notifications/Count": {
    /**
     * Count Notifications
     * @description Count notifications for a social profile.
     */
    get: operations["CountNotificationsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Conversations": {
    /**
     * Get Conversations
     * @description Get a list of conversations for a social profile.
     */
    get: operations["GetConversationsAsync"];
    /**
     * Create Conversation
     * @description Create a new conversation.
     */
    post: operations["CreateConversationAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{socialProfileId}/Conversations/Count": {
    /**
     * Count Conversations
     * @description Count conversations for a social profile.
     */
    get: operations["CountConversationsAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{conversationId}/Messages": {
    /**
     * Get Messages
     * @description Get a list of messages for a conversation.
     */
    get: operations["GetMessagesAsync"];
    /**
     * Create Message
     * @description Create a new message.
     */
    post: operations["CreateMessageAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{conversationId}/Messages/Count": {
    /**
     * Count Messages
     * @description Count messages for a conversation.
     */
    get: operations["CountMessagesAsync"];
  };
  "/api/v2/SocialService/SocialProfiles/{conversationId}/Messages/{messageId}": {
    /**
     * Update Message
     * @description Update a message.
     */
    put: operations["UpdateMessageAsync"];
    /**
     * Delete Message
     * @description Delete a message.
     */
    delete: operations["DeleteMessageAsync"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BooleanEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: boolean;
    };
    ConversationCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      subject?: string | null;
      socialProfileId?: string | null;
    };
    ConversationDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      subject?: string | null;
      socialProfileId?: string | null;
      /** Format: date-time */
      startedTimestamp?: string;
      /** Format: date-time */
      lastMessageTimestamp?: string;
      lastMessage?: string | null;
      socialProfileName?: string | null;
      socialProfileAvatarUrl?: string | null;
    };
    ConversationDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["ConversationDto"][] | null;
    };
    EmptyEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    ErrorEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
    };
    FollowRecordDto: {
      id?: string | null;
      type?: string | null;
      followerID?: string | null;
      followedID?: string | null;
      alerts?: boolean;
    };
    FollowRecordDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["FollowRecordDto"][] | null;
    };
    Int32Envelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      /** Format: int32 */
      result?: number;
    };
    NotificationDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      read?: boolean;
      icon?: string | null;
      message?: string | null;
      redirectUrl?: string | null;
      socialProfileID?: string | null;
      /** Format: date-time */
      readTimestamp?: string;
      /** Format: date-time */
      issuedTimestamp?: string;
    };
    NotificationDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["NotificationDto"][] | null;
    };
    PrivateMessageCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      title?: string | null;
      message?: string | null;
      conversationId?: string | null;
      senderSocialProfileId?: string | null;
      receiverSocialProfileId?: string | null;
    };
    PrivateMessageDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      read?: boolean;
      title?: string | null;
      message?: string | null;
      conversationId?: string | null;
      senderSocialProfileId?: string | null;
      receiverSocialProfileID?: string | null;
      /** Format: date-time */
      sentTimestamp?: string;
      /** Format: date-time */
      readTimestamp?: string;
      /** Format: date-time */
      receivedTimestamp?: string;
    };
    PrivateMessageDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["PrivateMessageDto"][] | null;
    };
    PrivateMessageUpdateDto: {
      title?: string | null;
      message?: string | null;
    };
    SocialFeedDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      /** Format: int32 */
      socialPostsCount?: number;
      socialProfileId?: string | null;
    };
    SocialFeedDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialFeedDto"];
    };
    SocialFeedDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialFeedDto"][] | null;
    };
    SocialFeedPostCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      title?: string | null;
      message?: string | null;
      socialFeedId?: string | null;
      socialProfileId?: string | null;
    };
    SocialFeedPostDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      title?: string | null;
      message?: string | null;
      socialProfileId?: string | null;
      socialProfileName?: string | null;
      socialProfileAvatarUrl?: string | null;
      /** Format: int32 */
      commentsCount?: number;
      /** Format: int32 */
      reactionsCount?: number;
      socialFeedId?: string | null;
    };
    SocialFeedPostDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialFeedPostDto"];
    };
    SocialFeedPostDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialFeedPostDto"][] | null;
    };
    SocialFeedPostUpdateDto: {
      title?: string | null;
      message?: string | null;
    };
    SocialPostAttachmentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      notes?: string | null;
      title?: string | null;
      author?: string | null;
      isFolder?: boolean;
      fileName?: string | null;
      abstract?: string | null;
      keyWords?: string | null;
      validResponse?: boolean;
      parentFileUploadId?: string | null;
      filePath?: string | null;
      /** Format: binary */
      file?: string | null;
      socialPostId?: string | null;
    };
    SocialPostAttachmentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      notes?: string | null;
      title?: string | null;
      author?: string | null;
      isFolder?: boolean;
      hash?: string | null;
      fileUrl?: string | null;
      filePath?: string | null;
      fileName?: string | null;
      abstract?: string | null;
      keyWords?: string | null;
      metadata?: string | null;
      /** Format: int64 */
      fileLength?: number;
      contentType?: string | null;
      parentFileId?: string | null;
      validResponse?: boolean;
      userId?: string | null;
      tenantId?: string | null;
      enrollmentId?: string | null;
      socialProfileId?: string | null;
      folderPath?: string | null;
      socialPostId?: string | null;
    };
    SocialPostAttachmentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialPostAttachmentDto"];
    };
    SocialPostAttachmentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialPostAttachmentDto"][] | null;
    };
    SocialPostAttachmentUpdateDto: {
      notes?: string | null;
      metadata?: string | null;
      title?: string | null;
      author?: string | null;
      isFolder?: boolean;
      fileName?: string | null;
      abstract?: string | null;
      keyWords?: string | null;
      validResponse?: boolean;
      parentFileUploadID?: string | null;
      filePath?: string | null;
      /** Format: binary */
      file?: string | null;
    };
    SocialPostCommentCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      message: string;
      parentCommentId?: string | null;
      socialProfileId?: string | null;
      socialFeedPostId?: string | null;
      socialPostId?: string | null;
    };
    SocialPostCommentDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      message?: string | null;
      parentCommentId?: string | null;
      socialProfileId?: string | null;
      socialFeedPostId?: string | null;
      socialProfileName?: string | null;
      socialProfileAvatarUrl?: string | null;
      socialPostId?: string | null;
    };
    SocialPostCommentDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialPostCommentDto"];
    };
    SocialPostCommentDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialPostCommentDto"][] | null;
    };
    SocialPostCommentUpdateDto: {
      message?: string | null;
      socialPostId?: string | null;
    };
    SocialPostCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      title?: string | null;
      message?: string | null;
      socialFeedId?: string | null;
      socialProfileId?: string | null;
    };
    SocialPostDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      title?: string | null;
      message?: string | null;
      socialProfileId?: string | null;
      socialProfileName?: string | null;
      socialProfileAvatarUrl?: string | null;
      /** Format: int32 */
      commentsCount?: number;
      /** Format: int32 */
      reactionsCount?: number;
    };
    SocialPostDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialPostDto"];
    };
    SocialPostDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialPostDto"][] | null;
    };
    SocialPostUpdateDto: {
      title?: string | null;
      message?: string | null;
    };
    SocialProfileDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      name?: string | null;
      about?: string | null;
      cover?: string | null;
      avatar?: string | null;
      countryId?: string | null;
      countryName?: string | null;
      identityId?: string | null;
      /** Format: int32 */
      followsCount?: number | null;
      /** Format: int32 */
      messagesCount?: number | null;
      /** Format: int32 */
      followersCount?: number | null;
      /** Format: int32 */
      notificationsCount?: number | null;
      /** Format: int32 */
      unreadNotificationsCount?: number | null;
      /** Format: int32 */
      unreadMessagesCount?: number | null;
      /**
       * Format: int32
       * @enum {integer|null}
       */
      type?: 0 | 1 | 2 | null;
      socialFeedId?: string | null;
      twitterUrl?: string | null;
      facebookURL?: string | null;
      linkedInURL?: string | null;
      youtubeURL?: string | null;
      githubURL?: string | null;
      pinterestURL?: string | null;
      dribbleURL?: string | null;
      domain?: string | null;
      notes?: string | null;
    };
    SocialProfileDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialProfileDto"];
    };
    SocialProfileDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialProfileDto"][] | null;
    };
    SocialReactionCreateDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      timestamp?: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      reaction?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
      reactionValue?: string | null;
      socialProfileId?: string | null;
    };
    SocialReactionDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      reaction?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
      reactionValue?: string | null;
      socialProfileId?: string | null;
      socialProfileName?: string | null;
      socialProfileAvatarUrl?: string | null;
    };
    SocialReactionDtoEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialReactionDto"];
    };
    SocialReactionDtoListEnvelope: {
      isSuccess?: boolean;
      errorMessage?: string | null;
      correlationId?: string | null;
      /** Format: date-time */
      timestamp?: string;
      activityId?: string | null;
      result?: components["schemas"]["SocialReactionDto"][] | null;
    };
    SocialReactionUpdateDto: {
      id?: string | null;
      /** Format: date-time */
      timestamp?: string | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      reaction?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
      reactionValue?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  GetFeedPostAsync: {
    parameters: {
      query: {
        socialProfileId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialFeedId: string;
        feedPostId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialFeedPostDtoEnvelope"];
          "application/xml": components["schemas"]["SocialFeedPostDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetSocialPostAsync: {
    parameters: {
      query: {
        socialProfileId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialPostId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialPostDtoEnvelope"];
          "application/xml": components["schemas"]["SocialPostDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetSocialPostAttachmentAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialPostId: string;
        attachmentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetSocialPostReactionAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialPostId: string;
        reactionId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialReactionDtoEnvelope"];
          "application/xml": components["schemas"]["SocialReactionDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  GetSocialPostCommentAsync: {
    parameters: {
      query: {
        socialProfileId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialPostId: string;
        commentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialPostCommentDtoEnvelope"];
          "application/xml": components["schemas"]["SocialPostCommentDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Social Profiles
   * @description Get a list of social profiles.
   */
  GetSocialProfilesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialProfileDtoListEnvelope"];
          "application/xml": components["schemas"]["SocialProfileDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Count Social Profiles
   * @description Count social profiles.
   */
  CountSocialProfilesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Social Profile
   * @description Get a social profile by ID.
   */
  GetSocialProfileAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialProfileDtoEnvelope"];
          "application/xml": components["schemas"]["SocialProfileDtoEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Followers
   * @description Get a list of followers for a social profile.
   */
  GetFollowersAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialProfileDtoListEnvelope"];
          "application/xml": components["schemas"]["SocialProfileDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Count Followers
   * @description Count followers for a social profile.
   */
  CountFollowersAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Follows
   * @description Get a list of follows for a social profile.
   */
  GetFollowsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SocialProfileDtoListEnvelope"];
          "application/xml": components["schemas"]["SocialProfileDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Count Follows
   * @description Count follows for a social profile.
   */
  CountFollowsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Check if Follow Exists
   * @description Check if a follow record exists between two social profiles.
   */
  FollowExistsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
        followedSocialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BooleanEnvelope"];
          "application/xml": components["schemas"]["BooleanEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Follow
   * @description Follow a social profile.
   */
  FollowAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
        followedSocialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Unfollow
   * @description Unfollow a social profile.
   */
  UnfollowAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
        followedSocialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Notifications
   * @description Get a list of notifications for a social profile.
   */
  GetNotificationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationDtoListEnvelope"];
          "application/xml": components["schemas"]["NotificationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Count Notifications
   * @description Count notifications for a social profile.
   */
  CountNotificationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Conversations
   * @description Get a list of conversations for a social profile.
   */
  GetConversationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ConversationDtoListEnvelope"];
          "application/xml": components["schemas"]["ConversationDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create Conversation
   * @description Create a new conversation.
   */
  CreateConversationAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ConversationCreateDto"];
        "application/xml": components["schemas"]["ConversationCreateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Count Conversations
   * @description Count conversations for a social profile.
   */
  CountConversationsAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        socialProfileId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Get Messages
   * @description Get a list of messages for a conversation.
   */
  GetMessagesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        conversationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateMessageDtoListEnvelope"];
          "application/xml": components["schemas"]["PrivateMessageDtoListEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Create Message
   * @description Create a new message.
   */
  CreateMessageAsync: {
    parameters: {
      query: {
        socialProfileId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        conversationId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PrivateMessageCreateDto"];
        "application/xml": components["schemas"]["PrivateMessageCreateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Count Messages
   * @description Count messages for a conversation.
   */
  CountMessagesAsync: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        conversationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Int32Envelope"];
          "application/xml": components["schemas"]["Int32Envelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Update Message
   * @description Update a message.
   */
  UpdateMessageAsync: {
    parameters: {
      query: {
        socialProfileId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        conversationId: string;
        messageId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PrivateMessageUpdateDto"];
        "application/xml": components["schemas"]["PrivateMessageUpdateDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
  /**
   * Delete Message
   * @description Delete a message.
   */
  DeleteMessageAsync: {
    parameters: {
      query: {
        socialProfileId: string;
        "api-version"?: string;
      };
      header?: {
        "x-api-version"?: string;
      };
      path: {
        conversationId: string;
        messageId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmptyEnvelope"];
          "application/xml": components["schemas"]["EmptyEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorEnvelope"];
          "application/xml": components["schemas"]["ErrorEnvelope"];
        };
      };
    };
  };
}
